// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AmazonChimeSDK
import AVFoundation
import AmazonChimeSDKMedia
import CoreGraphics.CGImage
import CoreGraphics
import Foundation
import Swift
import UIKit
import VideoToolbox
import os
@objc public protocol ActiveSpeakerDetectorFacade {
  @objc func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
}
@objc public protocol ActiveSpeakerObserver {
  @objc var observerId: Swift.String { get }
  @objc optional var scoresCallbackIntervalMs: Swift.Int { get }
  @objc optional func activeSpeakerScoreDidChange(scores: [AmazonChimeSDK.AttendeeInfo : Swift.Double])
  @objc func activeSpeakerDidDetect(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
}
@objc public protocol ActiveSpeakerPolicy {
  @objc func calculateScore(attendeeInfo: AmazonChimeSDK.AttendeeInfo, volume: AmazonChimeSDK.VolumeLevel) -> Swift.Double
  @objc func prioritizeVideoSendBandwidthForActiveSpeaker() -> Swift.Bool
}
@objc public protocol AudioClientController {
  @objc func setMute(mute: Swift.Bool) -> Swift.Bool
  @objc func start(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, meetingId: Swift.String, attendeeId: Swift.String, joinToken: Swift.String) throws
  @objc func stop()
}
@objc public protocol AudioClientObserver {
  @objc func notifyAudioClientObserver(observerFunction: @escaping (AmazonChimeSDK.AudioVideoObserver) -> Swift.Void)
  @objc func subscribeToAudioClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func subscribeToRealTimeEvents(observer: AmazonChimeSDK.RealtimeObserver)
  @objc func unsubscribeFromAudioClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func unsubscribeFromRealTimeEvents(observer: AmazonChimeSDK.RealtimeObserver)
}
@objc public protocol AudioVideoControllerFacade {
  @objc var configuration: AmazonChimeSDK.MeetingSessionConfiguration { get }
  @objc var logger: AmazonChimeSDK.Logger { get }
  @objc func start() throws
  @objc func stop()
  @objc func startLocalVideo() throws
  @objc func stopLocalVideo()
  @objc func startRemoteVideo()
  @objc func stopRemoteVideo()
  @objc func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
}
@objc public protocol AudioVideoFacade : AmazonChimeSDK.ActiveSpeakerDetectorFacade, AmazonChimeSDK.AudioVideoControllerFacade, AmazonChimeSDK.DeviceController, AmazonChimeSDK.RealtimeControllerFacade, AmazonChimeSDK.VideoTileControllerFacade {
}
@objc public protocol AudioVideoObserver {
  @objc func audioSessionDidStartConnecting(reconnecting: Swift.Bool)
  @objc func audioSessionDidStart(reconnecting: Swift.Bool)
  @objc func audioSessionDidDrop()
  @objc func audioSessionDidStopWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
  @objc func audioSessionDidCancelReconnect()
  @objc func connectionDidRecover()
  @objc func connectionDidBecomePoor()
  @objc func videoSessionDidStartConnecting()
  @objc func videoSessionDidStartWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
  @objc func videoSessionDidStopWithStatus(sessionStatus: AmazonChimeSDK.MeetingSessionStatus)
}
@objc @objcMembers public class AttendeeInfo : ObjectiveC.NSObject, Swift.Comparable {
  @objc final public let attendeeId: Swift.String
  @objc final public let externalUserId: Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public static func < (lhs: AmazonChimeSDK.AttendeeInfo, rhs: AmazonChimeSDK.AttendeeInfo) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ClientMetricsCollector {
  @objc func processAudioClientMetrics(metrics: [Swift.AnyHashable : Any])
  @objc func processVideoClientMetrics(metrics: [Swift.AnyHashable : Any])
  @objc func subscribeToMetrics(observer: AmazonChimeSDK.MetricsObserver)
  @objc func unsubscribeFromMetrics(observer: AmazonChimeSDK.MetricsObserver)
}
@objc @objcMembers public class ConsoleLogger : ObjectiveC.NSObject, AmazonChimeSDK.Logger {
  @objc public init(name: Swift.String, level: AmazonChimeSDK.LogLevel = .DEFAULT)
  @objc public func `default`(msg: Swift.String)
  @objc public func debug(debugFunction: () -> Swift.String)
  @objc public func info(msg: Swift.String)
  @objc public func fault(msg: Swift.String)
  @objc public func error(msg: Swift.String)
  @objc public func setLogLevel(level: AmazonChimeSDK.LogLevel)
  @objc public func getLogLevel() -> AmazonChimeSDK.LogLevel
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class CreateAttendeeResponse : ObjectiveC.NSObject {
  @objc public init(attendee: AmazonChimeSDK.Attendee)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class Attendee : ObjectiveC.NSObject {
  @objc public init(attendeeId: Swift.String, externalUserId: Swift.String, joinToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public typealias URLRewriter = (Swift.String) -> Swift.String
@objc public class URLRewriterUtils : ObjectiveC.NSObject {
  @objc public static let defaultUrlRewriter: AmazonChimeSDK.URLRewriter
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class CreateMeetingResponse : ObjectiveC.NSObject {
  @objc public init(meeting: AmazonChimeSDK.Meeting)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class Meeting : ObjectiveC.NSObject {
  @objc public init(externalMeetingId: Swift.String, mediaPlacement: AmazonChimeSDK.MediaPlacement, mediaRegion: Swift.String, meetingId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MediaPlacement : ObjectiveC.NSObject {
  @objc public init(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, signalingUrl: Swift.String, turnControlUrl: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers public class DefaultActiveSpeakerDetector : AmazonChimeSDK.ActiveSpeakerDetectorFacade, AmazonChimeSDK.RealtimeObserver {
  @objc deinit
  @objc public func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
  @objc public func volumeDidChange(volumeUpdates: [AmazonChimeSDK.VolumeUpdate])
  @objc public func signalStrengthDidChange(signalUpdates: [AmazonChimeSDK.SignalUpdate])
  @objc public func attendeesDidLeave(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidDrop(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidMute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidUnmute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc public func attendeesDidJoin(attendeeInfo attendeeInfos: [AmazonChimeSDK.AttendeeInfo])
  @objc public func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
}
@objcMembers public class DefaultActiveSpeakerPolicy : AmazonChimeSDK.ActiveSpeakerPolicy {
  @objc public init(speakerWeight: Swift.Double = 0.9, cutoffThreshold: Swift.Double = 0.01, takeoverRate: Swift.Double = 0.2)
  @objc public func calculateScore(attendeeInfo: AmazonChimeSDK.AttendeeInfo, volume: AmazonChimeSDK.VolumeLevel) -> Swift.Double
  @objc public func prioritizeVideoSendBandwidthForActiveSpeaker() -> Swift.Bool
  @objc deinit
}
@objcMembers public class DefaultAudioVideoController : AmazonChimeSDK.AudioVideoControllerFacade {
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc public init(audioClientController: AmazonChimeSDK.AudioClientController, audioClientObserver: AmazonChimeSDK.AudioClientObserver, clientMetricsCollector: AmazonChimeSDK.ClientMetricsCollector, videoClientController: AmazonChimeSDK.VideoClientController, configuration: AmazonChimeSDK.MeetingSessionConfiguration, logger: AmazonChimeSDK.Logger)
  @objc public func start() throws
  @objc public func stop()
  @objc public func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func startLocalVideo() throws
  @objc public func stopLocalVideo()
  @objc public func startRemoteVideo()
  @objc public func stopRemoteVideo()
  @objc deinit
}
@objcMembers public class DefaultAudioVideoFacade : AmazonChimeSDK.AudioVideoFacade {
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc public func start() throws
  @objc public func stop()
  @objc public func startLocalVideo() throws
  @objc public func stopLocalVideo()
  @objc public func startRemoteVideo()
  @objc public func stopRemoteVideo()
  @objc public func realtimeLocalMute() -> Swift.Bool
  @objc public func realtimeLocalUnmute() -> Swift.Bool
  @objc public func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func addAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func removeAudioVideoObserver(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc public func addMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func removeMetricsObserver(observer: AmazonChimeSDK.MetricsObserver)
  @objc public func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc public func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc public func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func switchCamera()
  @objc public func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
  @objc public func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc public func unbindVideoView(tileId: Swift.Int)
  @objc public func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc public func resumeRemoteVideoTile(tileId: Swift.Int)
  @objc public func addActiveSpeakerObserver(policy: AmazonChimeSDK.ActiveSpeakerPolicy, observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func removeActiveSpeakerObserver(observer: AmazonChimeSDK.ActiveSpeakerObserver)
  @objc public func hasBandwidthPriorityCallback(hasBandwidthPriority: Swift.Bool)
  @objc deinit
}
@objcMembers public class DefaultDeviceController : AmazonChimeSDK.DeviceController {
  @objc public init(audioSession: AVFoundation.AVAudioSession, videoClientController: AmazonChimeSDK.VideoClientController, logger: AmazonChimeSDK.Logger)
  @objc public func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc public func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc public func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc public func switchCamera()
  @objc public func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
  @objc deinit
}
@objc @objcMembers public class DefaultMeetingSession : ObjectiveC.NSObject, AmazonChimeSDK.MeetingSession {
  @objc final public let configuration: AmazonChimeSDK.MeetingSessionConfiguration
  @objc final public let logger: AmazonChimeSDK.Logger
  @objc final public let audioVideo: AmazonChimeSDK.AudioVideoFacade
  @objc public init(configuration: AmazonChimeSDK.MeetingSessionConfiguration, logger: AmazonChimeSDK.Logger)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers public class DefaultRealtimeController : AmazonChimeSDK.RealtimeControllerFacade {
  @objc public init(audioClientController: AmazonChimeSDK.AudioClientController, audioClientObserver: AmazonChimeSDK.AudioClientObserver)
  @objc public func realtimeLocalMute() -> Swift.Bool
  @objc public func realtimeLocalUnmute() -> Swift.Bool
  @objc public func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc public func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc deinit
}
@objc public enum AttendeeStatus : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case joined = 1
  case left = 2
  case dropped = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.AttendeeStatus]
  public static var allCases: [AmazonChimeSDK.AttendeeStatus] {
    get
  }
}
@objc @objcMembers public class DefaultVideoRenderView : UIKit.UIImageView, AmazonChimeSDK.VideoRenderView {
  @objc public var mirror: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc public func renderFrame(frame: Any?)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc deinit
}
@objcMembers public class DefaultVideoTile : AmazonChimeSDK.VideoTile {
  @objc public var state: AmazonChimeSDK.VideoTileState
  @objc public var videoRenderView: AmazonChimeSDK.VideoRenderView?
  @objc public func bind(videoRenderView: AmazonChimeSDK.VideoRenderView?)
  @objc public func renderFrame(frame: Any?)
  @objc public func unbind()
  @objc public func setPauseState(pauseState: AmazonChimeSDK.VideoPauseState)
  @objc deinit
}
@objcMembers public class DefaultVideoTileController : AmazonChimeSDK.VideoTileController {
  @objc public func onReceiveFrame(frame: Any?, attendeeId: Swift.String?, pauseState: AmazonChimeSDK.VideoPauseState, videoId: Swift.Int)
  @objc public func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc public func unbindVideoView(tileId: Swift.Int)
  @objc public func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc public func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc public func resumeRemoteVideoTile(tileId: Swift.Int)
  @objc deinit
}
@objc public protocol DeviceChangeObserver {
  @objc func audioDeviceDidChange(freshAudioDeviceList: [AmazonChimeSDK.MediaDevice])
}
@objc public protocol DeviceController {
  @objc func listAudioDevices() -> [AmazonChimeSDK.MediaDevice]
  @objc func chooseAudioDevice(mediaDevice: AmazonChimeSDK.MediaDevice)
  @objc func addDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc func removeDeviceChangeObserver(observer: AmazonChimeSDK.DeviceChangeObserver)
  @objc func switchCamera()
  @objc func getActiveCamera() -> AmazonChimeSDK.MediaDevice?
}
@objcMembers public class IntervalScheduler : AmazonChimeSDK.Scheduler {
  @objc deinit
  @objc public func start()
  @objc public func stop()
}
@objc public protocol Logger {
  @objc func `default`(msg: Swift.String)
  @objc func debug(debugFunction: () -> Swift.String)
  @objc func info(msg: Swift.String)
  @objc func fault(msg: Swift.String)
  @objc func error(msg: Swift.String)
  @objc func setLogLevel(level: AmazonChimeSDK.LogLevel)
  @objc func getLogLevel() -> AmazonChimeSDK.LogLevel
}
@objc public enum LogLevel : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case DEFAULT = 0
  case DEBUG = 1
  case INFO = 2
  case FAULT = 3
  case ERROR = 4
  case OFF = 5
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.LogLevel]
  public static var allCases: [AmazonChimeSDK.LogLevel] {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc @objcMembers public class MediaDevice : ObjectiveC.NSObject {
  @objc final public let label: Swift.String
  @objc final public let type: AmazonChimeSDK.MediaDeviceType
  @objc final public let port: AVFoundation.AVAudioSessionPortDescription?
  @objc public init(label: Swift.String, port: AVFoundation.AVAudioSessionPortDescription? = nil, videoDevice: AmazonChimeSDKMedia.VideoDevice? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MediaDeviceType : Swift.Int, Swift.CustomStringConvertible {
  case audioBluetooth
  case audioWiredHeadset
  case audioBuiltInSpeaker
  case audioHandset
  case videoFrontCamera
  case videoBackCamera
  case other
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MediaError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case illegalState
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MeetingSession {
  @objc var configuration: AmazonChimeSDK.MeetingSessionConfiguration { get }
  @objc var logger: AmazonChimeSDK.Logger { get }
  @objc var audioVideo: AmazonChimeSDK.AudioVideoFacade { get }
}
@objc @objcMembers public class MeetingSessionConfiguration : ObjectiveC.NSObject {
  @objc final public let meetingId: Swift.String
  @objc final public let credentials: AmazonChimeSDK.MeetingSessionCredentials
  @objc final public let urls: AmazonChimeSDK.MeetingSessionURLs
  @objc final public let urlRewriter: AmazonChimeSDK.URLRewriter
  @objc convenience public init(createMeetingResponse: AmazonChimeSDK.CreateMeetingResponse, createAttendeeResponse: AmazonChimeSDK.CreateAttendeeResponse)
  @objc public init(createMeetingResponse: AmazonChimeSDK.CreateMeetingResponse, createAttendeeResponse: AmazonChimeSDK.CreateAttendeeResponse, urlRewriter: @escaping AmazonChimeSDK.URLRewriter)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MeetingSessionCredentials : ObjectiveC.NSObject {
  @objc final public let attendeeId: Swift.String
  @objc final public let joinToken: Swift.String
  @objc public init(attendeeId: Swift.String, joinToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MeetingSessionStatus : ObjectiveC.NSObject {
  @objc final public let statusCode: AmazonChimeSDK.MeetingSessionStatusCode
  @objc public init(statusCode: AmazonChimeSDK.MeetingSessionStatusCode)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MeetingSessionStatusCode : Swift.UInt32, Swift.CustomStringConvertible {
  case ok = 0
  case audioDisconnected = 9
  case connectionHealthReconnect = 10
  case networkBecomePoor = 59
  case audioServerHungup = 60
  case audioJoinedFromAnotherDevice = 61
  case audioInternalServerError = 62
  case audioAuthenticationRejected = 63
  case audioCallAtCapacity = 64
  case audioServiceUnavailable = 65
  case audioDisconnectAudio = 69
  case audioCallEnded = 75
  case videoServiceUnavailable = 12
  case unknown = 78
  case videoAtCapacityViewOnly = 206
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt32
  public init?(rawValue: Swift.UInt32)
  public var rawValue: Swift.UInt32 {
    get
  }
}
@objc @objcMembers public class MeetingSessionURLs : ObjectiveC.NSObject {
  @objc final public let audioFallbackUrl: Swift.String
  @objc final public let audioHostUrl: Swift.String
  @objc final public let turnControlUrl: Swift.String
  @objc final public let signalingUrl: Swift.String
  @objc public init(audioFallbackUrl: Swift.String, audioHostUrl: Swift.String, turnControlUrl: Swift.String, signalingUrl: Swift.String, urlRewriter: (Swift.String) -> Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MetricsObserver {
  @objc func metricsDidReceive(metrics: [Swift.AnyHashable : Any])
}
@objc public enum ObservableMetric : Swift.Int, Swift.CustomStringConvertible {
  case audioReceivePacketLossPercent
  case audioSendPacketLossPercent
  case videoAvailableSendBandwidth
  case videoAvailableReceiveBandwidth
  case videoSendBitrate
  case videoSendPacketLossPercent
  case videoSendFps
  case videoSendRttMs
  case videoReceiveBitrate
  case videoReceivePacketLossPercent
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PermissionError : Swift.Int, Swift.Error, Swift.CustomStringConvertible {
  case audioPermissionError
  case videoPermissionError
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RealtimeControllerFacade {
  @objc func realtimeLocalMute() -> Swift.Bool
  @objc func realtimeLocalUnmute() -> Swift.Bool
  @objc func addRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
  @objc func removeRealtimeObserver(observer: AmazonChimeSDK.RealtimeObserver)
}
@objc public protocol RealtimeObserver {
  @objc func volumeDidChange(volumeUpdates: [AmazonChimeSDK.VolumeUpdate])
  @objc func signalStrengthDidChange(signalUpdates: [AmazonChimeSDK.SignalUpdate])
  @objc func attendeesDidJoin(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidLeave(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidDrop(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidMute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
  @objc func attendeesDidUnmute(attendeeInfo: [AmazonChimeSDK.AttendeeInfo])
}
@objc public protocol Scheduler {
  @objc func start()
  @objc func stop()
}
@objc public enum SignalStrength : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case none = 0
  case low = 1
  case high = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.SignalStrength]
  public static var allCases: [AmazonChimeSDK.SignalStrength] {
    get
  }
}
@objc @objcMembers public class SignalUpdate : ObjectiveC.NSObject {
  @objc final public let attendeeInfo: AmazonChimeSDK.AttendeeInfo
  @objc final public let signalStrength: AmazonChimeSDK.SignalStrength
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class Versioning : ObjectiveC.NSObject {
  @objc public static func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VideoClientController {
  @objc func start(turnControlUrl: Swift.String, signalingUrl: Swift.String, meetingId: Swift.String, joinToken: Swift.String)
  @objc func stopAndDestroy()
  @objc func startLocalVideo() throws
  @objc func stopLocalVideo()
  @objc func startRemoteVideo()
  @objc func stopRemoteVideo()
  @objc func switchCamera()
  @objc func getCurrentDevice() -> AmazonChimeSDKMedia.VideoDevice?
  @objc func subscribeToVideoClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func unsubscribeToVideoClientStateChange(observer: AmazonChimeSDK.AudioVideoObserver)
  @objc func subscribeToVideoTileControllerObservers(observer: AmazonChimeSDK.VideoTileController)
  @objc func unsubscribeToVideoTileControllerObservers(observer: AmazonChimeSDK.VideoTileController)
  @objc func pauseResumeRemoteVideo(_ videoId: Swift.UInt32, pause: Swift.Bool)
}
@objc @objcMembers public class VolumeUpdate : ObjectiveC.NSObject {
  @objc final public let attendeeInfo: AmazonChimeSDK.AttendeeInfo
  @objc final public let volumeLevel: AmazonChimeSDK.VolumeLevel
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VideoPauseState : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case unpaused = 0
  case pausedByUserRequest = 1
  case pausedForPoorConnection = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.VideoPauseState]
  public static var allCases: [AmazonChimeSDK.VideoPauseState] {
    get
  }
}
@objc public protocol VideoRenderView {
  @objc func renderFrame(frame: Any?)
}
@objc public protocol VideoTile {
  @objc var state: AmazonChimeSDK.VideoTileState { get }
  @objc var videoRenderView: AmazonChimeSDK.VideoRenderView? { get set }
  @objc func bind(videoRenderView: AmazonChimeSDK.VideoRenderView?)
  @objc func renderFrame(frame: Any?)
  @objc func unbind()
  @objc func setPauseState(pauseState: AmazonChimeSDK.VideoPauseState)
}
@objc public protocol VideoTileController : AmazonChimeSDK.VideoTileControllerFacade {
  @objc func onReceiveFrame(frame: Any?, attendeeId: Swift.String?, pauseState: AmazonChimeSDK.VideoPauseState, videoId: Swift.Int)
}
@objc public protocol VideoTileControllerFacade {
  @objc func bindVideoView(videoView: AmazonChimeSDK.VideoRenderView, tileId: Swift.Int)
  @objc func unbindVideoView(tileId: Swift.Int)
  @objc func addVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc func removeVideoTileObserver(observer: AmazonChimeSDK.VideoTileObserver)
  @objc func pauseRemoteVideoTile(tileId: Swift.Int)
  @objc func resumeRemoteVideoTile(tileId: Swift.Int)
}
@objc public protocol VideoTileObserver {
  @objc func videoTileDidAdd(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidRemove(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidPause(tileState: AmazonChimeSDK.VideoTileState)
  @objc func videoTileDidResume(tileState: AmazonChimeSDK.VideoTileState)
}
@objc @objcMembers public class VideoTileState : ObjectiveC.NSObject {
  @objc final public let tileId: Swift.Int
  @objc final public let isLocalTile: Swift.Bool
  @objc final public let attendeeId: Swift.String?
  @objc final public let isContent: Swift.Bool
  @objc public var pauseState: AmazonChimeSDK.VideoPauseState
  @objc public init(tileId: Swift.Int, attendeeId: Swift.String?, pauseState: AmazonChimeSDK.VideoPauseState)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VolumeLevel : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case muted = -1
  case notSpeaking = 0
  case low = 1
  case medium = 2
  case high = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [AmazonChimeSDK.VolumeLevel]
  public static var allCases: [AmazonChimeSDK.VolumeLevel] {
    get
  }
}
extension AmazonChimeSDK.AttendeeStatus : Swift.Hashable {}
extension AmazonChimeSDK.AttendeeStatus : Swift.RawRepresentable {}
extension AmazonChimeSDK.LogLevel : Swift.Equatable {}
extension AmazonChimeSDK.LogLevel : Swift.Hashable {}
extension AmazonChimeSDK.LogLevel : Swift.RawRepresentable {}
extension AmazonChimeSDK.MediaDeviceType : Swift.Hashable {}
extension AmazonChimeSDK.MediaDeviceType : Swift.RawRepresentable {}
extension AmazonChimeSDK.MeetingSessionStatusCode : Swift.Hashable {}
extension AmazonChimeSDK.MeetingSessionStatusCode : Swift.RawRepresentable {}
extension AmazonChimeSDK.ObservableMetric : Swift.Hashable {}
extension AmazonChimeSDK.ObservableMetric : Swift.RawRepresentable {}
extension AmazonChimeSDK.SignalStrength : Swift.Hashable {}
extension AmazonChimeSDK.SignalStrength : Swift.RawRepresentable {}
extension AmazonChimeSDK.VideoPauseState : Swift.Hashable {}
extension AmazonChimeSDK.VideoPauseState : Swift.RawRepresentable {}
extension AmazonChimeSDK.VolumeLevel : Swift.Hashable {}
extension AmazonChimeSDK.VolumeLevel : Swift.RawRepresentable {}
