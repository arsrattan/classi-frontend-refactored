#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmazonChimeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol ActiveSpeakerPolicy;
@protocol ActiveSpeakerObserver;

/// <code>ActiveSpeakerDetectorFacade</code> listens to the volume indicator updates from the <code>RealtimeControllerFacade</code>.
/// It consults the <code>ActiveSpeakerPolicy</code> to determine if the speaker is active or not.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK27ActiveSpeakerDetectorFacade_")
@protocol ActiveSpeakerDetectorFacade
/// Starts the active speaker detector on the callback for the given policy.
/// \param policy Handles Active Speaker implementation
///
/// \param observer Observer that handles Active Speaker Events
///
- (void)addActiveSpeakerObserverWithPolicy:(id <ActiveSpeakerPolicy> _Nonnull)policy observer:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Stops the active speaker detector callback from being called.
/// \param observer Observer that handles Active Speaker Events
///
- (void)removeActiveSpeakerObserverWithObserver:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Handles bandwidth
/// \param hasBandwidthPriority Tells the active speaker detector
/// whether or not to prioritize video bandwidth for active speakers
///
- (void)hasBandwidthPriorityCallbackWithHasBandwidthPriority:(BOOL)hasBandwidthPriority;
@end

@class AttendeeInfo;

/// <code>ActiveSpeakerObserver</code> handles event related to finding active speaker and corresponding scores
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21ActiveSpeakerObserver_")
@protocol ActiveSpeakerObserver
/// Uniquely identifies this observer
@property (nonatomic, readonly, copy) NSString * _Nonnull observerId;
@optional
/// Frequency of activeSpeakerScoreDidChange
@property (nonatomic, readonly) NSInteger scoresCallbackIntervalMs;
/// Observes the active speaker scores at frequency scoresCallbackIntervalMs
/// Note: this callback will be called on main thread.
/// \param scores Active speaker scores for each attendee
///
- (void)activeSpeakerScoreDidChangeWithScores:(NSDictionary<AttendeeInfo *, NSNumber *> * _Nonnull)scores;
@required
/// Observes changes in list of active speakers
/// Note: this callback will be called on main thread.
/// \param attendeeInfo List of active speakers in decreasing order of score
///
- (void)activeSpeakerDidDetectWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end

enum VolumeLevel : NSInteger;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19ActiveSpeakerPolicy_")
@protocol ActiveSpeakerPolicy
/// Return the score of the speaker. If the score is 0, this speaker is not active.
/// \param attendeeInfo Attendee to calculate the score for
///
/// \param volume Volume level of the speaker
///
///
/// returns:
/// The score of the speaker. The higher score, the more active the speaker.
- (double)calculateScoreWithAttendeeInfo:(AttendeeInfo * _Nonnull)attendeeInfo volume:(enum VolumeLevel)volume SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the audio video controller is allowed to increase video send bandwidth
/// for the currently active speaker if they have an active video tile. Set this to true, if
/// your application makes the active speaker video tile larger than the other tiles.
///
/// returns:
/// Whether to prioritize video bandwidth for active speakers
- (BOOL)prioritizeVideoSendBandwidthForActiveSpeaker SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK8Attendee")
@interface Attendee : NSObject
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId externalUserId:(NSString * _Nonnull)externalUserId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK12AttendeeInfo")
@interface AttendeeInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
@property (nonatomic, readonly, copy) NSString * _Nonnull externalUserId;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>AttendeeStatus</code> describes the status of attendee
typedef SWIFT_ENUM(NSInteger, AttendeeStatus, open) {
/// The attendee joined
  AttendeeStatusJoined = 1,
/// The attendee left
  AttendeeStatusLeft = 2,
/// The attendee dropped due to network issues
  AttendeeStatusDropped = 3,
};


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21AudioClientController_")
@protocol AudioClientController
- (BOOL)setMuteWithMute:(BOOL)mute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl meetingId:(NSString * _Nonnull)meetingId attendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken error:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@end

@protocol AudioVideoObserver;
@protocol RealtimeObserver;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19AudioClientObserver_")
@protocol AudioClientObserver
- (void)notifyAudioClientObserverWithObserverFunction:(void (^ _Nonnull)(id <AudioVideoObserver> _Nonnull))observerFunction;
- (void)subscribeToAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
- (void)unsubscribeFromAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeFromRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end

@class MeetingSessionConfiguration;
@protocol Logger;
@protocol MetricsObserver;

/// <code>AudioVideoControllerFacade</code> manages the signaling and peer connections.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK26AudioVideoControllerFacade_")
@protocol AudioVideoControllerFacade
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
/// Start AudioVideo Controller
///
/// throws:
/// <code>PermissionError.audioPermissionError</code> if <code>RecordPermission</code> is not given
- (BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop AudioVideo Controller. This will exit the meeting
- (void)stop;
/// Enable self video to start streaming
///
/// throws:
/// <code>PermissionError.videoPermissionError</code> if video permission of <code>AVCaptureDevice</code> is not granted
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disable self video streaming
- (void)stopLocalVideo;
/// Enable remote video to start receiving streams
- (void)startRemoteVideo;
/// Disable remote video to stop receiving streams
- (void)stopRemoteVideo;
/// Subscribe to audio, video, and connection events with an <code>AudioVideoObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Unsubscribes from audio, video, and connection events by removing specified <code>AudioVideoObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Subscribe to metrics events with an <code>MetricsObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
/// Unsubscribes from metrics events by removing specified <code>MetricsObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

@protocol VideoRenderView;
@protocol VideoTileObserver;

/// <code>VideoTileControllerFacade</code> allows one to control <code>VideoTile</code>. The caller is responsible for laying
/// out video render views as desired and binding tile ids received from the observer
/// in the <code>videoTileDidAdd</code> and <code>videoTileDidRemove</code> callbacks.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK25VideoTileControllerFacade_")
@protocol VideoTileControllerFacade
/// Binds the video rendering view to Video Tile. The view will start displaying the video frame
/// after the completion of this API
/// \param videoView View to render the video. Application needs to create it and pass to SDK.
///
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidAdd</code>
///
- (void)bindVideoViewWithVideoView:(id <VideoRenderView> _Nonnull)videoView tileId:(NSInteger)tileId;
/// Unbinds the video rendering view from Video Tile. The view will stop displaying the video frame
/// after the completion of this API
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidRemove</code>
///
- (void)unbindVideoViewWithTileId:(NSInteger)tileId;
/// Subscribe to Video Tile events with an <code>VideoTileObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Unsubscribes from Video Tile events by removing specified <code>VideoTileObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Pauses remote video tile, if it exists.
/// \param tileId The tile id to pause
///
- (void)pauseRemoteVideoTileWithTileId:(NSInteger)tileId;
/// Resume remote video tile, if it exists.
/// \param tileId The tile id to resume
///
- (void)resumeRemoteVideoTileWithTileId:(NSInteger)tileId;
@end

@class MediaDevice;
@protocol DeviceChangeObserver;

/// <code>DeviceController</code> keeps track of the devices being used for audio device
/// (e.g. built-in speaker), video input (e.g. camera)).
/// The list functions return <code>MediaDevice</code> objects.
/// Changes in device availability are broadcast to any registered
/// <code>DeviceChangeObserver</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16DeviceController_")
@protocol DeviceController
/// List available audio devices
///
/// returns:
/// list of Media Devices
- (NSArray<MediaDevice *> * _Nonnull)listAudioDevices SWIFT_WARN_UNUSED_RESULT;
/// Choose audio devices
/// \param mediaDevice the device used as audio route
///
- (void)chooseAudioDeviceWithMediaDevice:(MediaDevice * _Nonnull)mediaDevice;
/// Add device change observer
/// \param observer the object that will receive notification
///
- (void)addDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Remove device change observer
/// \param observer the object that will be removed
///
- (void)removeDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Switch between front/back camera
- (void)switchCamera;
/// Get currently used video device
///
/// returns:
/// a media device or nil if no device is present
- (MediaDevice * _Nullable)getActiveCamera SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>RealtimeControllerFacade</code> controls aspects meetings concerning realtime UX
/// that for performance, privacy, or other reasons should be implemented using
/// the most direct path. Callbacks generated by this interface should be
/// consumed synchronously and without business logic dependent on the UI state
/// where possible.
/// Events will be passed through <code>RealtimeObserver</code>, which in turn provides consumers the
/// volume/mute/signal/attendee callbacks that can be used to render in the UI.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK24RealtimeControllerFacade_")
@protocol RealtimeControllerFacade
/// Mutes the audio input.
///
/// returns:
/// Whether mute was successful
- (BOOL)realtimeLocalMute SWIFT_WARN_UNUSED_RESULT;
/// Unmutes the audio input if currently allowed
///
/// returns:
/// Whether unmute was successful
- (BOOL)realtimeLocalUnmute SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to real time events with an observer
/// \param observer Observer that handles real time events
///
- (void)addRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
/// Unsubscribes from real time events by removing the specified observer
/// \param observer Observer that handles real time events
///
- (void)removeRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16AudioVideoFacade_")
@protocol AudioVideoFacade <ActiveSpeakerDetectorFacade, AudioVideoControllerFacade, DeviceController, RealtimeControllerFacade, VideoTileControllerFacade>
@end

@class MeetingSessionStatus;

/// <code>AudioVideoObserver</code> handles audio/video session events.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK18AudioVideoObserver_")
@protocol AudioVideoObserver
/// Called when the audio session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartConnectingWithReconnecting:(BOOL)reconnecting;
/// Called when the audio session has started.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartWithReconnecting:(BOOL)reconnecting;
/// Called when audio session got dropped due to poor network conditions.
/// There will be an automatic attempt of reconnecting it.
/// If the reconnection is successful, <code>onAudioSessionStarted</code> will be called with value of reconnecting as true
/// Note: this callback will be called on main thread.
- (void)audioSessionDidDrop;
/// Called when the audio session has stopped with the reason
/// provided in the status. This callback implies that audio client has stopped permanently for this session and there will be
/// no attempt of reconnecting it.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)audioSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the audio reconnection is canceled.
/// Note: this callback will be called on main thread.
- (void)audioSessionDidCancelReconnect;
/// Called when the connection health is recovered.
/// Note: this callback will be called on main thread.
- (void)connectionDidRecover;
/// Called when connection is becoming poor.
/// Note: this callback will be called on main thread.
- (void)connectionDidBecomePoor;
/// Called when the video session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
- (void)videoSessionDidStartConnecting;
/// Called when the video session has started.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The status of meeting session
///
- (void)videoSessionDidStartWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the video session has stopped from a started state with the reason
/// provided in the status.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)videoSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
@end


/// ClientMetricsCollector takes the raw metrics from the native client,
/// consolidates them into a normalize map of ObservableMetric to value,
/// and eventually calls the OnReceiveMetric callback.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK22ClientMetricsCollector_")
@protocol ClientMetricsCollector
- (void)processAudioClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)processVideoClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)subscribeToMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
- (void)unsubscribeFromMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

enum LogLevel : NSInteger;

/// <code>Logger</code> defines how to write logs for different logging level.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK6Logger_")
@protocol Logger
/// Emits any message if the log level is equal to or lower than default level.
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
/// Calls <code>debugFunction</code> only if the log level is debug and emits the
/// resulting string. Use the debug level to dump large or verbose messages
/// that could slow down performance.
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
/// Emits an info message if the log level is equal to or lower than info level.
- (void)infoWithMsg:(NSString * _Nonnull)msg;
/// Emits a fault message if the log level is equal to or lower than fault level.
- (void)faultWithMsg:(NSString * _Nonnull)msg;
/// Emits an error message if the log level is equal to or lower than error level.
- (void)errorWithMsg:(NSString * _Nonnull)msg;
/// Sets the log level.
- (void)setLogLevelWithLevel:(enum LogLevel)level;
/// Gets the current log level.
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
@end


/// ConsoleLogger writes logs with console.
/// \code
/// // working with the ConsoleLogger
/// let logger = new ConsoleLogger("demo"); //default level is LogLevel.DEFAULT prints everything
/// logger.info("info");
/// logger.debug("debug");
/// logger.fault("fault");
/// logger.error("error");
///
/// // setting logging levels
/// let logger = new ConsoleLogger("demo", .INFO);
/// logger.debug("debug"); // does not print
/// logger.setLogLevel(LogLevel.DEBUG)
/// logger.debug("debug"); // print
///
/// \endcode
SWIFT_CLASS("_TtC14AmazonChimeSDK13ConsoleLogger")
@interface ConsoleLogger : NSObject <Logger>
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name level:(enum LogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
- (void)infoWithMsg:(NSString * _Nonnull)msg;
- (void)faultWithMsg:(NSString * _Nonnull)msg;
- (void)errorWithMsg:(NSString * _Nonnull)msg;
- (void)setLogLevelWithLevel:(enum LogLevel)level;
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK22CreateAttendeeResponse")
@interface CreateAttendeeResponse : NSObject
- (nonnull instancetype)initWithAttendee:(Attendee * _Nonnull)attendee OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Meeting;

SWIFT_CLASS("_TtC14AmazonChimeSDK21CreateMeetingResponse")
@interface CreateMeetingResponse : NSObject
- (nonnull instancetype)initWithMeeting:(Meeting * _Nonnull)meeting OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK14MeetingSession_")
@protocol MeetingSession
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK21DefaultMeetingSession")
@interface DefaultMeetingSession : NSObject <MeetingSession>
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
- (nonnull instancetype)initWithConfiguration:(MeetingSessionConfiguration * _Nonnull)configuration logger:(id <Logger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>VideoRenderView</code> renders frame that comes from <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15VideoRenderView_")
@protocol VideoRenderView
/// Render given frame to UI
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
@end

@class NSCoder;
@class UIImage;

SWIFT_CLASS("_TtC14AmazonChimeSDK22DefaultVideoRenderView")
@interface DefaultVideoRenderView : UIImageView <VideoRenderView>
@property (nonatomic) BOOL mirror;
@property (nonatomic) UIViewContentMode contentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)renderFrameWithFrame:(id _Nullable)frame;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


/// <code>DeviceChangeObserver</code> listens to the change of Audio Device.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK20DeviceChangeObserver_")
@protocol DeviceChangeObserver
/// Called when listAudioDevices() output changed
/// In another word, when a new media device become available
/// or old media device become unavailable
/// Note: this callback will be called on main thread.
/// \param freshAudioDeviceList updated list of available devices
///
- (void)audioDeviceDidChangeWithFreshAudioDeviceList:(NSArray<MediaDevice *> * _Nonnull)freshAudioDeviceList;
@end


typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDEFAULT = 0,
  LogLevelDEBUG = 1,
  LogLevelINFO = 2,
  LogLevelFAULT = 3,
  LogLevelERROR = 4,
  LogLevelOFF = 5,
};


enum MediaDeviceType : NSInteger;
@class AVAudioSessionPortDescription;
@class VideoDevice;

/// <code>MediaDevice</code> represents an IOS audio/video device.
SWIFT_CLASS("_TtC14AmazonChimeSDK11MediaDevice")
@interface MediaDevice : NSObject
/// Label of MediaDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Type of MediaDevice (ex: Bluetooth Audio, Front Camera)
@property (nonatomic, readonly) enum MediaDeviceType type;
/// Audio Information based on iOS native <code>AVAudioSessionPortDescription</code>
/// It will be null when it represent a video device.
@property (nonatomic, readonly, strong) AVAudioSessionPortDescription * _Nullable port;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label port:(AVAudioSessionPortDescription * _Nullable)port videoDevice:(VideoDevice * _Nullable)videoDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaDeviceType, open) {
  MediaDeviceTypeAudioBluetooth = 0,
  MediaDeviceTypeAudioWiredHeadset = 1,
  MediaDeviceTypeAudioBuiltInSpeaker = 2,
  MediaDeviceTypeAudioHandset = 3,
  MediaDeviceTypeVideoFrontCamera = 4,
  MediaDeviceTypeVideoBackCamera = 5,
  MediaDeviceTypeOther = 6,
};

typedef SWIFT_ENUM(NSInteger, MediaError, open) {
  MediaErrorIllegalState = 0,
};
static NSString * _Nonnull const MediaErrorDomain = @"AmazonChimeSDK.MediaError";


SWIFT_CLASS("_TtC14AmazonChimeSDK14MediaPlacement")
@interface MediaPlacement : NSObject
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl signalingUrl:(NSString * _Nonnull)signalingUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK7Meeting")
@interface Meeting : NSObject
- (nonnull instancetype)initWithExternalMeetingId:(NSString * _Nonnull)externalMeetingId mediaPlacement:(MediaPlacement * _Nonnull)mediaPlacement mediaRegion:(NSString * _Nonnull)mediaRegion meetingId:(NSString * _Nonnull)meetingId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MeetingSessionCredentials;
@class MeetingSessionURLs;

/// <code>MeetingSessionConfiguration</code> contains the information necessary to start a session.
/// Constructs a MeetingSessionConfiguration with a chime:<code>CreateMeetingResponse</code> and
/// chime:<code>CreateAttendeeResponse</code> response and optional custom <code>URLRewriter</code> that will
/// rewrite urls given to new urls.
SWIFT_CLASS("_TtC14AmazonChimeSDK27MeetingSessionConfiguration")
@interface MeetingSessionConfiguration : NSObject
/// The id of the meeting the session is joining.
@property (nonatomic, readonly, copy) NSString * _Nonnull meetingId;
/// The credentials used to authenticate the session.
@property (nonatomic, readonly, strong) MeetingSessionCredentials * _Nonnull credentials;
/// The URLs the session uses to reach the meeting service.
@property (nonatomic, readonly, strong) MeetingSessionURLs * _Nonnull urls;
@property (nonatomic, readonly, copy) NSString * _Nonnull (^ _Nonnull urlRewriter)(NSString * _Nonnull);
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse;
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse urlRewriter:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MeetingSessionCredentials</code> includes the credentials used to authenticate.
/// the attendee on the meeting
SWIFT_CLASS("_TtC14AmazonChimeSDK25MeetingSessionCredentials")
@interface MeetingSessionCredentials : NSObject
/// The attendee id for these credentials.
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
/// The token that the session will be authenticated with
@property (nonatomic, readonly, copy) NSString * _Nonnull joinToken;
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MeetingSessionStatusCode : uint32_t;

/// <code>MeetingSessionStatus</code> indicates a status received regarding the session.
SWIFT_CLASS("_TtC14AmazonChimeSDK20MeetingSessionStatus")
@interface MeetingSessionStatus : NSObject
@property (nonatomic, readonly) enum MeetingSessionStatusCode statusCode;
- (nonnull instancetype)initWithStatusCode:(enum MeetingSessionStatusCode)statusCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, MeetingSessionStatusCode, open) {
/// Everything is OK so far.
  MeetingSessionStatusCodeOk = 0,
/// The audio leg failed.
  MeetingSessionStatusCodeAudioDisconnected = 9,
/// Due to connection health a reconnect has been triggered.
  MeetingSessionStatusCodeConnectionHealthReconnect = 10,
/// Network is not good enough for VoIP.
  MeetingSessionStatusCodeNetworkBecomePoor = 59,
/// Server hung up.
  MeetingSessionStatusCodeAudioServerHungup = 60,
/// The attendee joined from another device.
  MeetingSessionStatusCodeAudioJoinedFromAnotherDevice = 61,
/// There was an internal server error with the audio leg.
  MeetingSessionStatusCodeAudioInternalServerError = 62,
/// Authentication was rejected. The client is not allowed on this call.
  MeetingSessionStatusCodeAudioAuthenticationRejected = 63,
/// The client can not join because the call is at capacity.
  MeetingSessionStatusCodeAudioCallAtCapacity = 64,
/// Could not connect the audio leg due to the service being unavailable.
  MeetingSessionStatusCodeAudioServiceUnavailable = 65,
/// The attendee should explicitly switch itself from joined with audio to checked-in.
  MeetingSessionStatusCodeAudioDisconnectAudio = 69,
/// The call was ended.
  MeetingSessionStatusCodeAudioCallEnded = 75,
/// video service is unavailable.
  MeetingSessionStatusCodeVideoServiceUnavailable = 12,
/// If State cannot be parsed, then use this state.
  MeetingSessionStatusCodeUnknown = 78,
/// When maximum concurrent video channel reached
  MeetingSessionStatusCodeVideoAtCapacityViewOnly = 206,
};


/// <code>MeetingSessionURLs</code> contains the URLs that will be used to reach the meeting service.
SWIFT_CLASS("_TtC14AmazonChimeSDK18MeetingSessionURLs")
@interface MeetingSessionURLs : NSObject
/// The audio fallback URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioFallbackUrl;
/// The audio host URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioHostUrl;
/// The TURN control URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull turnControlUrl;
/// The signaling URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull signalingUrl;
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl urlRewriter:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MetricsObserver</code> handles events related to audio/video metrics.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15MetricsObserver_")
@protocol MetricsObserver
/// Called when metrics are collected and ready
/// \param metrics A dictionary of ObservableMetric case to value
///
- (void)metricsDidReceiveWithMetrics:(NSDictionary * _Nonnull)metrics;
@end

/// <code>ObservableMetric</code> types represents filtered metrics that are intended to propagate to the
/// top level observers. All metrics are measured over the past second.
/// Send video metrics are only reported when sending.
/// Receive video metrics are only reported when receiving.
typedef SWIFT_ENUM(NSInteger, ObservableMetric, open) {
/// Percentage of audio packets lost from server to client
  ObservableMetricAudioReceivePacketLossPercent = 0,
/// Percentage of audio packets lost from client to server
  ObservableMetricAudioSendPacketLossPercent = 1,
/// Estimated uplink bandwidth from perspective of video client
  ObservableMetricVideoAvailableSendBandwidth = 2,
/// Estimated downlink bandwidth from perspective of video client
  ObservableMetricVideoAvailableReceiveBandwidth = 3,
/// Sum of total bitrate across all send streams
  ObservableMetricVideoSendBitrate = 4,
/// Percentage of video packets lost from client to server across all send streams
  ObservableMetricVideoSendPacketLossPercent = 5,
/// Average send FPS across all send streams
  ObservableMetricVideoSendFps = 6,
/// Round trip time of packets sent from client to server
  ObservableMetricVideoSendRttMs = 7,
/// Sum of total bitrate across all receive streams
  ObservableMetricVideoReceiveBitrate = 8,
/// Percentage of video packets lost from server to client across all receive streams
  ObservableMetricVideoReceivePacketLossPercent = 9,
};

typedef SWIFT_ENUM(NSInteger, PermissionError, open) {
  PermissionErrorAudioPermissionError = 0,
  PermissionErrorVideoPermissionError = 1,
};
static NSString * _Nonnull const PermissionErrorDomain = @"AmazonChimeSDK.PermissionError";


@class VolumeUpdate;
@class SignalUpdate;

/// <code>RealtimeObserver</code> handles event that happens in realtime,
/// such as delta in attendees join or leave, volume/signal status.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16RealtimeObserver_")
@protocol RealtimeObserver
/// Handles volume changes for attendees
/// Note: this callback will be called on main thread.
/// \param volumeUpdates An array of VolumeUpdates
///
- (void)volumeDidChangeWithVolumeUpdates:(NSArray<VolumeUpdate *> * _Nonnull)volumeUpdates;
/// Handles signal strength changes for attendees
/// Note: this callback will be called on main thread.
/// \param signalUpdates An array of SignalUpdates
///
- (void)signalStrengthDidChangeWithSignalUpdates:(NSArray<SignalUpdate *> * _Nonnull)signalUpdates;
/// List attendees that are newly added to the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo added
///
- (void)attendeesDidJoinWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that left the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who left
///
- (void)attendeesDidLeaveWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that got dropped from the meeting due to network
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who are dropped
///
- (void)attendeesDidDropWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that are newly muted in the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly muted
///
- (void)attendeesDidMuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that newly unmuted from the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly unmuted
///
- (void)attendeesDidUnmuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end


/// <code>Scheduler</code> calls a callback on the schedule determined by the implementation.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9Scheduler_")
@protocol Scheduler
/// Schedules the callback according to the implementation.
- (void)start;
/// Unschedules the callback and prevents it from being called anymore.
- (void)stop;
@end

/// <code>SignalStrength</code> describes the signal strength of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, SignalStrength, open) {
/// The attendee has no signal
  SignalStrengthNone = 0,
/// The attendee has low signal
  SignalStrengthLow = 1,
/// The attendee has high signal
  SignalStrengthHigh = 2,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12SignalUpdate")
@interface SignalUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum SignalStrength signalStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>URLRewriterUtils</code> is class that defines default Url rewrite behavior
SWIFT_CLASS("_TtC14AmazonChimeSDK16URLRewriterUtils")
@interface URLRewriterUtils : NSObject
/// The default implementation returns the original URL unchanged.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull (^ _Nonnull defaultUrlRewriter)(NSString * _Nonnull);)
+ (NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))defaultUrlRewriter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK10Versioning")
@interface Versioning : NSObject
/// Returns the current version of Amazon Chime SDK in the format of string.
/// If there is an error with the version, empty string will be returned.
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol VideoTileController;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21VideoClientController_")
@protocol VideoClientController
- (void)startWithTurnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl meetingId:(NSString * _Nonnull)meetingId joinToken:(NSString * _Nonnull)joinToken;
- (void)stopAndDestroy;
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopLocalVideo;
- (void)startRemoteVideo;
- (void)stopRemoteVideo;
- (void)switchCamera;
- (VideoDevice * _Nullable)getCurrentDevice SWIFT_WARN_UNUSED_RESULT;
- (void)subscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)unsubscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)pauseResumeRemoteVideo:(uint32_t)videoId pause:(BOOL)pause;
@end

/// <code>VideoPauseState</code> describes the pause status of a video tile.
typedef SWIFT_ENUM(NSInteger, VideoPauseState, open) {
/// The video tile is not paused
  VideoPauseStateUnpaused = 0,
/// The video tile has been paused by the user, and will only be unpaused if the user requests it to resume.
  VideoPauseStatePausedByUserRequest = 1,
/// The video tile has been paused to save on local downlink bandwidth.  When the connection improves,
/// it will be automatically unpaused by the client.  User requested pauses will shadow this pause,
/// but if the connection has not recovered on resume the tile will still be paused with this state.
  VideoPauseStatePausedForPoorConnection = 2,
};


@class VideoTileState;

/// <code>VideoTile</code> is a tile that binds video render view to diplay the frame into the view.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9VideoTile_")
@protocol VideoTile
/// State of VideoTile
@property (nonatomic, readonly, strong) VideoTileState * _Nonnull state;
/// View which will be used to render the Video Frame
@property (nonatomic, strong) id <VideoRenderView> _Nullable videoRenderView;
/// Binds the view to the tile. The view needs to be create by the application.
/// Once the binding is done, the view will start displaying the video frame automatically
/// \param videoRenderView the view created by application to render the video frame
///
- (void)bindWithVideoRenderView:(id <VideoRenderView> _Nullable)videoRenderView;
/// Renders the frame on <code>videoRenderView</code>. The call will be silently ignored if the view has not been bind
/// to the tile using <code>bind</code>
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
/// Unbinds the <code>videoRenderView</code> from tile.
- (void)unbind;
/// Update the pause state of the tile.
- (void)setPauseStateWithPauseState:(enum VideoPauseState)pauseState;
@end


/// <code>VideoTileController</code> handles rendering/creating of new <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19VideoTileController_")
@protocol VideoTileController <VideoTileControllerFacade>
/// Called whenever there is a new Video frame received for any of the attendee in the meeting
/// \param frame a frame of video
///
/// \param attendeeId a id of user who is transmitting current frame
///
/// \param pauseState current pause state of the video being received
///
/// \param videoId unique id that belongs to video being transmitted
///
- (void)onReceiveFrameWithFrame:(id _Nullable)frame attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState videoId:(NSInteger)videoId;
@end



/// <code>VideoTileObserver</code> handles events related to <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK17VideoTileObserver_")
@protocol VideoTileObserver
/// Called whenever a new attendee starts sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidAddWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever any attendee stops sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidRemoveWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes from .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidPauseWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes to .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidResumeWithTileState:(VideoTileState * _Nonnull)tileState;
@end


/// <code>VideoTileState</code> encapsulates the state of a <code>VideoTile</code>.
SWIFT_CLASS("_TtC14AmazonChimeSDK14VideoTileState")
@interface VideoTileState : NSObject
/// Unique Id associated with this tile
@property (nonatomic, readonly) NSInteger tileId;
/// Whether tile is local or remote tile
@property (nonatomic, readonly) BOOL isLocalTile;
/// Id of the user associated with this tile
@property (nonatomic, readonly, copy) NSString * _Nullable attendeeId;
/// Whether this is screen share
@property (nonatomic, readonly) BOOL isContent;
/// Current pause state of this tile
@property (nonatomic) enum VideoPauseState pauseState;
- (nonnull instancetype)initWithTileId:(NSInteger)tileId attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VolumeLevel</code> describes the volume level of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, VolumeLevel, open) {
/// The attendee is muted
  VolumeLevelMuted = -1,
/// The attendee is not speaking
  VolumeLevelNotSpeaking = 0,
/// The attendee is speaking at low volume
  VolumeLevelLow = 1,
/// The attendee is speaking at medium volume
  VolumeLevelMedium = 2,
/// The attendee is speaking at high volume
  VolumeLevelHigh = 3,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12VolumeUpdate")
@interface VolumeUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum VolumeLevel volumeLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmazonChimeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol ActiveSpeakerPolicy;
@protocol ActiveSpeakerObserver;

/// <code>ActiveSpeakerDetectorFacade</code> listens to the volume indicator updates from the <code>RealtimeControllerFacade</code>.
/// It consults the <code>ActiveSpeakerPolicy</code> to determine if the speaker is active or not.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK27ActiveSpeakerDetectorFacade_")
@protocol ActiveSpeakerDetectorFacade
/// Starts the active speaker detector on the callback for the given policy.
/// \param policy Handles Active Speaker implementation
///
/// \param observer Observer that handles Active Speaker Events
///
- (void)addActiveSpeakerObserverWithPolicy:(id <ActiveSpeakerPolicy> _Nonnull)policy observer:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Stops the active speaker detector callback from being called.
/// \param observer Observer that handles Active Speaker Events
///
- (void)removeActiveSpeakerObserverWithObserver:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Handles bandwidth
/// \param hasBandwidthPriority Tells the active speaker detector
/// whether or not to prioritize video bandwidth for active speakers
///
- (void)hasBandwidthPriorityCallbackWithHasBandwidthPriority:(BOOL)hasBandwidthPriority;
@end

@class AttendeeInfo;

/// <code>ActiveSpeakerObserver</code> handles event related to finding active speaker and corresponding scores
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21ActiveSpeakerObserver_")
@protocol ActiveSpeakerObserver
/// Uniquely identifies this observer
@property (nonatomic, readonly, copy) NSString * _Nonnull observerId;
@optional
/// Frequency of activeSpeakerScoreDidChange
@property (nonatomic, readonly) NSInteger scoresCallbackIntervalMs;
/// Observes the active speaker scores at frequency scoresCallbackIntervalMs
/// Note: this callback will be called on main thread.
/// \param scores Active speaker scores for each attendee
///
- (void)activeSpeakerScoreDidChangeWithScores:(NSDictionary<AttendeeInfo *, NSNumber *> * _Nonnull)scores;
@required
/// Observes changes in list of active speakers
/// Note: this callback will be called on main thread.
/// \param attendeeInfo List of active speakers in decreasing order of score
///
- (void)activeSpeakerDidDetectWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end

enum VolumeLevel : NSInteger;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19ActiveSpeakerPolicy_")
@protocol ActiveSpeakerPolicy
/// Return the score of the speaker. If the score is 0, this speaker is not active.
/// \param attendeeInfo Attendee to calculate the score for
///
/// \param volume Volume level of the speaker
///
///
/// returns:
/// The score of the speaker. The higher score, the more active the speaker.
- (double)calculateScoreWithAttendeeInfo:(AttendeeInfo * _Nonnull)attendeeInfo volume:(enum VolumeLevel)volume SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the audio video controller is allowed to increase video send bandwidth
/// for the currently active speaker if they have an active video tile. Set this to true, if
/// your application makes the active speaker video tile larger than the other tiles.
///
/// returns:
/// Whether to prioritize video bandwidth for active speakers
- (BOOL)prioritizeVideoSendBandwidthForActiveSpeaker SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK8Attendee")
@interface Attendee : NSObject
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId externalUserId:(NSString * _Nonnull)externalUserId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK12AttendeeInfo")
@interface AttendeeInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
@property (nonatomic, readonly, copy) NSString * _Nonnull externalUserId;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>AttendeeStatus</code> describes the status of attendee
typedef SWIFT_ENUM(NSInteger, AttendeeStatus, open) {
/// The attendee joined
  AttendeeStatusJoined = 1,
/// The attendee left
  AttendeeStatusLeft = 2,
/// The attendee dropped due to network issues
  AttendeeStatusDropped = 3,
};


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21AudioClientController_")
@protocol AudioClientController
- (BOOL)setMuteWithMute:(BOOL)mute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl meetingId:(NSString * _Nonnull)meetingId attendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken error:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@end

@protocol AudioVideoObserver;
@protocol RealtimeObserver;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19AudioClientObserver_")
@protocol AudioClientObserver
- (void)notifyAudioClientObserverWithObserverFunction:(void (^ _Nonnull)(id <AudioVideoObserver> _Nonnull))observerFunction;
- (void)subscribeToAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
- (void)unsubscribeFromAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeFromRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end

@class MeetingSessionConfiguration;
@protocol Logger;
@protocol MetricsObserver;

/// <code>AudioVideoControllerFacade</code> manages the signaling and peer connections.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK26AudioVideoControllerFacade_")
@protocol AudioVideoControllerFacade
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
/// Start AudioVideo Controller
///
/// throws:
/// <code>PermissionError.audioPermissionError</code> if <code>RecordPermission</code> is not given
- (BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop AudioVideo Controller. This will exit the meeting
- (void)stop;
/// Enable self video to start streaming
///
/// throws:
/// <code>PermissionError.videoPermissionError</code> if video permission of <code>AVCaptureDevice</code> is not granted
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disable self video streaming
- (void)stopLocalVideo;
/// Enable remote video to start receiving streams
- (void)startRemoteVideo;
/// Disable remote video to stop receiving streams
- (void)stopRemoteVideo;
/// Subscribe to audio, video, and connection events with an <code>AudioVideoObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Unsubscribes from audio, video, and connection events by removing specified <code>AudioVideoObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Subscribe to metrics events with an <code>MetricsObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
/// Unsubscribes from metrics events by removing specified <code>MetricsObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

@protocol VideoRenderView;
@protocol VideoTileObserver;

/// <code>VideoTileControllerFacade</code> allows one to control <code>VideoTile</code>. The caller is responsible for laying
/// out video render views as desired and binding tile ids received from the observer
/// in the <code>videoTileDidAdd</code> and <code>videoTileDidRemove</code> callbacks.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK25VideoTileControllerFacade_")
@protocol VideoTileControllerFacade
/// Binds the video rendering view to Video Tile. The view will start displaying the video frame
/// after the completion of this API
/// \param videoView View to render the video. Application needs to create it and pass to SDK.
///
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidAdd</code>
///
- (void)bindVideoViewWithVideoView:(id <VideoRenderView> _Nonnull)videoView tileId:(NSInteger)tileId;
/// Unbinds the video rendering view from Video Tile. The view will stop displaying the video frame
/// after the completion of this API
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidRemove</code>
///
- (void)unbindVideoViewWithTileId:(NSInteger)tileId;
/// Subscribe to Video Tile events with an <code>VideoTileObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Unsubscribes from Video Tile events by removing specified <code>VideoTileObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Pauses remote video tile, if it exists.
/// \param tileId The tile id to pause
///
- (void)pauseRemoteVideoTileWithTileId:(NSInteger)tileId;
/// Resume remote video tile, if it exists.
/// \param tileId The tile id to resume
///
- (void)resumeRemoteVideoTileWithTileId:(NSInteger)tileId;
@end

@class MediaDevice;
@protocol DeviceChangeObserver;

/// <code>DeviceController</code> keeps track of the devices being used for audio device
/// (e.g. built-in speaker), video input (e.g. camera)).
/// The list functions return <code>MediaDevice</code> objects.
/// Changes in device availability are broadcast to any registered
/// <code>DeviceChangeObserver</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16DeviceController_")
@protocol DeviceController
/// List available audio devices
///
/// returns:
/// list of Media Devices
- (NSArray<MediaDevice *> * _Nonnull)listAudioDevices SWIFT_WARN_UNUSED_RESULT;
/// Choose audio devices
/// \param mediaDevice the device used as audio route
///
- (void)chooseAudioDeviceWithMediaDevice:(MediaDevice * _Nonnull)mediaDevice;
/// Add device change observer
/// \param observer the object that will receive notification
///
- (void)addDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Remove device change observer
/// \param observer the object that will be removed
///
- (void)removeDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Switch between front/back camera
- (void)switchCamera;
/// Get currently used video device
///
/// returns:
/// a media device or nil if no device is present
- (MediaDevice * _Nullable)getActiveCamera SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>RealtimeControllerFacade</code> controls aspects meetings concerning realtime UX
/// that for performance, privacy, or other reasons should be implemented using
/// the most direct path. Callbacks generated by this interface should be
/// consumed synchronously and without business logic dependent on the UI state
/// where possible.
/// Events will be passed through <code>RealtimeObserver</code>, which in turn provides consumers the
/// volume/mute/signal/attendee callbacks that can be used to render in the UI.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK24RealtimeControllerFacade_")
@protocol RealtimeControllerFacade
/// Mutes the audio input.
///
/// returns:
/// Whether mute was successful
- (BOOL)realtimeLocalMute SWIFT_WARN_UNUSED_RESULT;
/// Unmutes the audio input if currently allowed
///
/// returns:
/// Whether unmute was successful
- (BOOL)realtimeLocalUnmute SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to real time events with an observer
/// \param observer Observer that handles real time events
///
- (void)addRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
/// Unsubscribes from real time events by removing the specified observer
/// \param observer Observer that handles real time events
///
- (void)removeRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16AudioVideoFacade_")
@protocol AudioVideoFacade <ActiveSpeakerDetectorFacade, AudioVideoControllerFacade, DeviceController, RealtimeControllerFacade, VideoTileControllerFacade>
@end

@class MeetingSessionStatus;

/// <code>AudioVideoObserver</code> handles audio/video session events.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK18AudioVideoObserver_")
@protocol AudioVideoObserver
/// Called when the audio session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartConnectingWithReconnecting:(BOOL)reconnecting;
/// Called when the audio session has started.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartWithReconnecting:(BOOL)reconnecting;
/// Called when audio session got dropped due to poor network conditions.
/// There will be an automatic attempt of reconnecting it.
/// If the reconnection is successful, <code>onAudioSessionStarted</code> will be called with value of reconnecting as true
/// Note: this callback will be called on main thread.
- (void)audioSessionDidDrop;
/// Called when the audio session has stopped with the reason
/// provided in the status. This callback implies that audio client has stopped permanently for this session and there will be
/// no attempt of reconnecting it.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)audioSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the audio reconnection is canceled.
/// Note: this callback will be called on main thread.
- (void)audioSessionDidCancelReconnect;
/// Called when the connection health is recovered.
/// Note: this callback will be called on main thread.
- (void)connectionDidRecover;
/// Called when connection is becoming poor.
/// Note: this callback will be called on main thread.
- (void)connectionDidBecomePoor;
/// Called when the video session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
- (void)videoSessionDidStartConnecting;
/// Called when the video session has started.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The status of meeting session
///
- (void)videoSessionDidStartWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the video session has stopped from a started state with the reason
/// provided in the status.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)videoSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
@end


/// ClientMetricsCollector takes the raw metrics from the native client,
/// consolidates them into a normalize map of ObservableMetric to value,
/// and eventually calls the OnReceiveMetric callback.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK22ClientMetricsCollector_")
@protocol ClientMetricsCollector
- (void)processAudioClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)processVideoClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)subscribeToMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
- (void)unsubscribeFromMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

enum LogLevel : NSInteger;

/// <code>Logger</code> defines how to write logs for different logging level.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK6Logger_")
@protocol Logger
/// Emits any message if the log level is equal to or lower than default level.
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
/// Calls <code>debugFunction</code> only if the log level is debug and emits the
/// resulting string. Use the debug level to dump large or verbose messages
/// that could slow down performance.
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
/// Emits an info message if the log level is equal to or lower than info level.
- (void)infoWithMsg:(NSString * _Nonnull)msg;
/// Emits a fault message if the log level is equal to or lower than fault level.
- (void)faultWithMsg:(NSString * _Nonnull)msg;
/// Emits an error message if the log level is equal to or lower than error level.
- (void)errorWithMsg:(NSString * _Nonnull)msg;
/// Sets the log level.
- (void)setLogLevelWithLevel:(enum LogLevel)level;
/// Gets the current log level.
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
@end


/// ConsoleLogger writes logs with console.
/// \code
/// // working with the ConsoleLogger
/// let logger = new ConsoleLogger("demo"); //default level is LogLevel.DEFAULT prints everything
/// logger.info("info");
/// logger.debug("debug");
/// logger.fault("fault");
/// logger.error("error");
///
/// // setting logging levels
/// let logger = new ConsoleLogger("demo", .INFO);
/// logger.debug("debug"); // does not print
/// logger.setLogLevel(LogLevel.DEBUG)
/// logger.debug("debug"); // print
///
/// \endcode
SWIFT_CLASS("_TtC14AmazonChimeSDK13ConsoleLogger")
@interface ConsoleLogger : NSObject <Logger>
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name level:(enum LogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
- (void)infoWithMsg:(NSString * _Nonnull)msg;
- (void)faultWithMsg:(NSString * _Nonnull)msg;
- (void)errorWithMsg:(NSString * _Nonnull)msg;
- (void)setLogLevelWithLevel:(enum LogLevel)level;
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK22CreateAttendeeResponse")
@interface CreateAttendeeResponse : NSObject
- (nonnull instancetype)initWithAttendee:(Attendee * _Nonnull)attendee OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Meeting;

SWIFT_CLASS("_TtC14AmazonChimeSDK21CreateMeetingResponse")
@interface CreateMeetingResponse : NSObject
- (nonnull instancetype)initWithMeeting:(Meeting * _Nonnull)meeting OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK14MeetingSession_")
@protocol MeetingSession
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK21DefaultMeetingSession")
@interface DefaultMeetingSession : NSObject <MeetingSession>
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
- (nonnull instancetype)initWithConfiguration:(MeetingSessionConfiguration * _Nonnull)configuration logger:(id <Logger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>VideoRenderView</code> renders frame that comes from <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15VideoRenderView_")
@protocol VideoRenderView
/// Render given frame to UI
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
@end

@class NSCoder;
@class UIImage;

SWIFT_CLASS("_TtC14AmazonChimeSDK22DefaultVideoRenderView")
@interface DefaultVideoRenderView : UIImageView <VideoRenderView>
@property (nonatomic) BOOL mirror;
@property (nonatomic) UIViewContentMode contentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)renderFrameWithFrame:(id _Nullable)frame;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


/// <code>DeviceChangeObserver</code> listens to the change of Audio Device.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK20DeviceChangeObserver_")
@protocol DeviceChangeObserver
/// Called when listAudioDevices() output changed
/// In another word, when a new media device become available
/// or old media device become unavailable
/// Note: this callback will be called on main thread.
/// \param freshAudioDeviceList updated list of available devices
///
- (void)audioDeviceDidChangeWithFreshAudioDeviceList:(NSArray<MediaDevice *> * _Nonnull)freshAudioDeviceList;
@end


typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDEFAULT = 0,
  LogLevelDEBUG = 1,
  LogLevelINFO = 2,
  LogLevelFAULT = 3,
  LogLevelERROR = 4,
  LogLevelOFF = 5,
};


enum MediaDeviceType : NSInteger;
@class AVAudioSessionPortDescription;
@class VideoDevice;

/// <code>MediaDevice</code> represents an IOS audio/video device.
SWIFT_CLASS("_TtC14AmazonChimeSDK11MediaDevice")
@interface MediaDevice : NSObject
/// Label of MediaDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Type of MediaDevice (ex: Bluetooth Audio, Front Camera)
@property (nonatomic, readonly) enum MediaDeviceType type;
/// Audio Information based on iOS native <code>AVAudioSessionPortDescription</code>
/// It will be null when it represent a video device.
@property (nonatomic, readonly, strong) AVAudioSessionPortDescription * _Nullable port;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label port:(AVAudioSessionPortDescription * _Nullable)port videoDevice:(VideoDevice * _Nullable)videoDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaDeviceType, open) {
  MediaDeviceTypeAudioBluetooth = 0,
  MediaDeviceTypeAudioWiredHeadset = 1,
  MediaDeviceTypeAudioBuiltInSpeaker = 2,
  MediaDeviceTypeAudioHandset = 3,
  MediaDeviceTypeVideoFrontCamera = 4,
  MediaDeviceTypeVideoBackCamera = 5,
  MediaDeviceTypeOther = 6,
};

typedef SWIFT_ENUM(NSInteger, MediaError, open) {
  MediaErrorIllegalState = 0,
};
static NSString * _Nonnull const MediaErrorDomain = @"AmazonChimeSDK.MediaError";


SWIFT_CLASS("_TtC14AmazonChimeSDK14MediaPlacement")
@interface MediaPlacement : NSObject
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl signalingUrl:(NSString * _Nonnull)signalingUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK7Meeting")
@interface Meeting : NSObject
- (nonnull instancetype)initWithExternalMeetingId:(NSString * _Nonnull)externalMeetingId mediaPlacement:(MediaPlacement * _Nonnull)mediaPlacement mediaRegion:(NSString * _Nonnull)mediaRegion meetingId:(NSString * _Nonnull)meetingId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MeetingSessionCredentials;
@class MeetingSessionURLs;

/// <code>MeetingSessionConfiguration</code> contains the information necessary to start a session.
/// Constructs a MeetingSessionConfiguration with a chime:<code>CreateMeetingResponse</code> and
/// chime:<code>CreateAttendeeResponse</code> response and optional custom <code>URLRewriter</code> that will
/// rewrite urls given to new urls.
SWIFT_CLASS("_TtC14AmazonChimeSDK27MeetingSessionConfiguration")
@interface MeetingSessionConfiguration : NSObject
/// The id of the meeting the session is joining.
@property (nonatomic, readonly, copy) NSString * _Nonnull meetingId;
/// The credentials used to authenticate the session.
@property (nonatomic, readonly, strong) MeetingSessionCredentials * _Nonnull credentials;
/// The URLs the session uses to reach the meeting service.
@property (nonatomic, readonly, strong) MeetingSessionURLs * _Nonnull urls;
@property (nonatomic, readonly, copy) NSString * _Nonnull (^ _Nonnull urlRewriter)(NSString * _Nonnull);
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse;
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse urlRewriter:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MeetingSessionCredentials</code> includes the credentials used to authenticate.
/// the attendee on the meeting
SWIFT_CLASS("_TtC14AmazonChimeSDK25MeetingSessionCredentials")
@interface MeetingSessionCredentials : NSObject
/// The attendee id for these credentials.
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
/// The token that the session will be authenticated with
@property (nonatomic, readonly, copy) NSString * _Nonnull joinToken;
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MeetingSessionStatusCode : uint32_t;

/// <code>MeetingSessionStatus</code> indicates a status received regarding the session.
SWIFT_CLASS("_TtC14AmazonChimeSDK20MeetingSessionStatus")
@interface MeetingSessionStatus : NSObject
@property (nonatomic, readonly) enum MeetingSessionStatusCode statusCode;
- (nonnull instancetype)initWithStatusCode:(enum MeetingSessionStatusCode)statusCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, MeetingSessionStatusCode, open) {
/// Everything is OK so far.
  MeetingSessionStatusCodeOk = 0,
/// The audio leg failed.
  MeetingSessionStatusCodeAudioDisconnected = 9,
/// Due to connection health a reconnect has been triggered.
  MeetingSessionStatusCodeConnectionHealthReconnect = 10,
/// Network is not good enough for VoIP.
  MeetingSessionStatusCodeNetworkBecomePoor = 59,
/// Server hung up.
  MeetingSessionStatusCodeAudioServerHungup = 60,
/// The attendee joined from another device.
  MeetingSessionStatusCodeAudioJoinedFromAnotherDevice = 61,
/// There was an internal server error with the audio leg.
  MeetingSessionStatusCodeAudioInternalServerError = 62,
/// Authentication was rejected. The client is not allowed on this call.
  MeetingSessionStatusCodeAudioAuthenticationRejected = 63,
/// The client can not join because the call is at capacity.
  MeetingSessionStatusCodeAudioCallAtCapacity = 64,
/// Could not connect the audio leg due to the service being unavailable.
  MeetingSessionStatusCodeAudioServiceUnavailable = 65,
/// The attendee should explicitly switch itself from joined with audio to checked-in.
  MeetingSessionStatusCodeAudioDisconnectAudio = 69,
/// The call was ended.
  MeetingSessionStatusCodeAudioCallEnded = 75,
/// video service is unavailable.
  MeetingSessionStatusCodeVideoServiceUnavailable = 12,
/// If State cannot be parsed, then use this state.
  MeetingSessionStatusCodeUnknown = 78,
/// When maximum concurrent video channel reached
  MeetingSessionStatusCodeVideoAtCapacityViewOnly = 206,
};


/// <code>MeetingSessionURLs</code> contains the URLs that will be used to reach the meeting service.
SWIFT_CLASS("_TtC14AmazonChimeSDK18MeetingSessionURLs")
@interface MeetingSessionURLs : NSObject
/// The audio fallback URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioFallbackUrl;
/// The audio host URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioHostUrl;
/// The TURN control URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull turnControlUrl;
/// The signaling URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull signalingUrl;
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl urlRewriter:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MetricsObserver</code> handles events related to audio/video metrics.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15MetricsObserver_")
@protocol MetricsObserver
/// Called when metrics are collected and ready
/// \param metrics A dictionary of ObservableMetric case to value
///
- (void)metricsDidReceiveWithMetrics:(NSDictionary * _Nonnull)metrics;
@end

/// <code>ObservableMetric</code> types represents filtered metrics that are intended to propagate to the
/// top level observers. All metrics are measured over the past second.
/// Send video metrics are only reported when sending.
/// Receive video metrics are only reported when receiving.
typedef SWIFT_ENUM(NSInteger, ObservableMetric, open) {
/// Percentage of audio packets lost from server to client
  ObservableMetricAudioReceivePacketLossPercent = 0,
/// Percentage of audio packets lost from client to server
  ObservableMetricAudioSendPacketLossPercent = 1,
/// Estimated uplink bandwidth from perspective of video client
  ObservableMetricVideoAvailableSendBandwidth = 2,
/// Estimated downlink bandwidth from perspective of video client
  ObservableMetricVideoAvailableReceiveBandwidth = 3,
/// Sum of total bitrate across all send streams
  ObservableMetricVideoSendBitrate = 4,
/// Percentage of video packets lost from client to server across all send streams
  ObservableMetricVideoSendPacketLossPercent = 5,
/// Average send FPS across all send streams
  ObservableMetricVideoSendFps = 6,
/// Round trip time of packets sent from client to server
  ObservableMetricVideoSendRttMs = 7,
/// Sum of total bitrate across all receive streams
  ObservableMetricVideoReceiveBitrate = 8,
/// Percentage of video packets lost from server to client across all receive streams
  ObservableMetricVideoReceivePacketLossPercent = 9,
};

typedef SWIFT_ENUM(NSInteger, PermissionError, open) {
  PermissionErrorAudioPermissionError = 0,
  PermissionErrorVideoPermissionError = 1,
};
static NSString * _Nonnull const PermissionErrorDomain = @"AmazonChimeSDK.PermissionError";


@class VolumeUpdate;
@class SignalUpdate;

/// <code>RealtimeObserver</code> handles event that happens in realtime,
/// such as delta in attendees join or leave, volume/signal status.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16RealtimeObserver_")
@protocol RealtimeObserver
/// Handles volume changes for attendees
/// Note: this callback will be called on main thread.
/// \param volumeUpdates An array of VolumeUpdates
///
- (void)volumeDidChangeWithVolumeUpdates:(NSArray<VolumeUpdate *> * _Nonnull)volumeUpdates;
/// Handles signal strength changes for attendees
/// Note: this callback will be called on main thread.
/// \param signalUpdates An array of SignalUpdates
///
- (void)signalStrengthDidChangeWithSignalUpdates:(NSArray<SignalUpdate *> * _Nonnull)signalUpdates;
/// List attendees that are newly added to the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo added
///
- (void)attendeesDidJoinWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that left the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who left
///
- (void)attendeesDidLeaveWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that got dropped from the meeting due to network
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who are dropped
///
- (void)attendeesDidDropWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that are newly muted in the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly muted
///
- (void)attendeesDidMuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that newly unmuted from the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly unmuted
///
- (void)attendeesDidUnmuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end


/// <code>Scheduler</code> calls a callback on the schedule determined by the implementation.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9Scheduler_")
@protocol Scheduler
/// Schedules the callback according to the implementation.
- (void)start;
/// Unschedules the callback and prevents it from being called anymore.
- (void)stop;
@end

/// <code>SignalStrength</code> describes the signal strength of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, SignalStrength, open) {
/// The attendee has no signal
  SignalStrengthNone = 0,
/// The attendee has low signal
  SignalStrengthLow = 1,
/// The attendee has high signal
  SignalStrengthHigh = 2,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12SignalUpdate")
@interface SignalUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum SignalStrength signalStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>URLRewriterUtils</code> is class that defines default Url rewrite behavior
SWIFT_CLASS("_TtC14AmazonChimeSDK16URLRewriterUtils")
@interface URLRewriterUtils : NSObject
/// The default implementation returns the original URL unchanged.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull (^ _Nonnull defaultUrlRewriter)(NSString * _Nonnull);)
+ (NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))defaultUrlRewriter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK10Versioning")
@interface Versioning : NSObject
/// Returns the current version of Amazon Chime SDK in the format of string.
/// If there is an error with the version, empty string will be returned.
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol VideoTileController;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21VideoClientController_")
@protocol VideoClientController
- (void)startWithTurnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl meetingId:(NSString * _Nonnull)meetingId joinToken:(NSString * _Nonnull)joinToken;
- (void)stopAndDestroy;
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopLocalVideo;
- (void)startRemoteVideo;
- (void)stopRemoteVideo;
- (void)switchCamera;
- (VideoDevice * _Nullable)getCurrentDevice SWIFT_WARN_UNUSED_RESULT;
- (void)subscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)unsubscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)pauseResumeRemoteVideo:(uint32_t)videoId pause:(BOOL)pause;
@end

/// <code>VideoPauseState</code> describes the pause status of a video tile.
typedef SWIFT_ENUM(NSInteger, VideoPauseState, open) {
/// The video tile is not paused
  VideoPauseStateUnpaused = 0,
/// The video tile has been paused by the user, and will only be unpaused if the user requests it to resume.
  VideoPauseStatePausedByUserRequest = 1,
/// The video tile has been paused to save on local downlink bandwidth.  When the connection improves,
/// it will be automatically unpaused by the client.  User requested pauses will shadow this pause,
/// but if the connection has not recovered on resume the tile will still be paused with this state.
  VideoPauseStatePausedForPoorConnection = 2,
};


@class VideoTileState;

/// <code>VideoTile</code> is a tile that binds video render view to diplay the frame into the view.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9VideoTile_")
@protocol VideoTile
/// State of VideoTile
@property (nonatomic, readonly, strong) VideoTileState * _Nonnull state;
/// View which will be used to render the Video Frame
@property (nonatomic, strong) id <VideoRenderView> _Nullable videoRenderView;
/// Binds the view to the tile. The view needs to be create by the application.
/// Once the binding is done, the view will start displaying the video frame automatically
/// \param videoRenderView the view created by application to render the video frame
///
- (void)bindWithVideoRenderView:(id <VideoRenderView> _Nullable)videoRenderView;
/// Renders the frame on <code>videoRenderView</code>. The call will be silently ignored if the view has not been bind
/// to the tile using <code>bind</code>
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
/// Unbinds the <code>videoRenderView</code> from tile.
- (void)unbind;
/// Update the pause state of the tile.
- (void)setPauseStateWithPauseState:(enum VideoPauseState)pauseState;
@end


/// <code>VideoTileController</code> handles rendering/creating of new <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19VideoTileController_")
@protocol VideoTileController <VideoTileControllerFacade>
/// Called whenever there is a new Video frame received for any of the attendee in the meeting
/// \param frame a frame of video
///
/// \param attendeeId a id of user who is transmitting current frame
///
/// \param pauseState current pause state of the video being received
///
/// \param videoId unique id that belongs to video being transmitted
///
- (void)onReceiveFrameWithFrame:(id _Nullable)frame attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState videoId:(NSInteger)videoId;
@end



/// <code>VideoTileObserver</code> handles events related to <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK17VideoTileObserver_")
@protocol VideoTileObserver
/// Called whenever a new attendee starts sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidAddWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever any attendee stops sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidRemoveWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes from .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidPauseWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes to .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidResumeWithTileState:(VideoTileState * _Nonnull)tileState;
@end


/// <code>VideoTileState</code> encapsulates the state of a <code>VideoTile</code>.
SWIFT_CLASS("_TtC14AmazonChimeSDK14VideoTileState")
@interface VideoTileState : NSObject
/// Unique Id associated with this tile
@property (nonatomic, readonly) NSInteger tileId;
/// Whether tile is local or remote tile
@property (nonatomic, readonly) BOOL isLocalTile;
/// Id of the user associated with this tile
@property (nonatomic, readonly, copy) NSString * _Nullable attendeeId;
/// Whether this is screen share
@property (nonatomic, readonly) BOOL isContent;
/// Current pause state of this tile
@property (nonatomic) enum VideoPauseState pauseState;
- (nonnull instancetype)initWithTileId:(NSInteger)tileId attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VolumeLevel</code> describes the volume level of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, VolumeLevel, open) {
/// The attendee is muted
  VolumeLevelMuted = -1,
/// The attendee is not speaking
  VolumeLevelNotSpeaking = 0,
/// The attendee is speaking at low volume
  VolumeLevelLow = 1,
/// The attendee is speaking at medium volume
  VolumeLevelMedium = 2,
/// The attendee is speaking at high volume
  VolumeLevelHigh = 3,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12VolumeUpdate")
@interface VolumeUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum VolumeLevel volumeLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmazonChimeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol ActiveSpeakerPolicy;
@protocol ActiveSpeakerObserver;

/// <code>ActiveSpeakerDetectorFacade</code> listens to the volume indicator updates from the <code>RealtimeControllerFacade</code>.
/// It consults the <code>ActiveSpeakerPolicy</code> to determine if the speaker is active or not.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK27ActiveSpeakerDetectorFacade_")
@protocol ActiveSpeakerDetectorFacade
/// Starts the active speaker detector on the callback for the given policy.
/// \param policy Handles Active Speaker implementation
///
/// \param observer Observer that handles Active Speaker Events
///
- (void)addActiveSpeakerObserverWithPolicy:(id <ActiveSpeakerPolicy> _Nonnull)policy observer:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Stops the active speaker detector callback from being called.
/// \param observer Observer that handles Active Speaker Events
///
- (void)removeActiveSpeakerObserverWithObserver:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Handles bandwidth
/// \param hasBandwidthPriority Tells the active speaker detector
/// whether or not to prioritize video bandwidth for active speakers
///
- (void)hasBandwidthPriorityCallbackWithHasBandwidthPriority:(BOOL)hasBandwidthPriority;
@end

@class AttendeeInfo;

/// <code>ActiveSpeakerObserver</code> handles event related to finding active speaker and corresponding scores
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21ActiveSpeakerObserver_")
@protocol ActiveSpeakerObserver
/// Uniquely identifies this observer
@property (nonatomic, readonly, copy) NSString * _Nonnull observerId;
@optional
/// Frequency of activeSpeakerScoreDidChange
@property (nonatomic, readonly) NSInteger scoresCallbackIntervalMs;
/// Observes the active speaker scores at frequency scoresCallbackIntervalMs
/// Note: this callback will be called on main thread.
/// \param scores Active speaker scores for each attendee
///
- (void)activeSpeakerScoreDidChangeWithScores:(NSDictionary<AttendeeInfo *, NSNumber *> * _Nonnull)scores;
@required
/// Observes changes in list of active speakers
/// Note: this callback will be called on main thread.
/// \param attendeeInfo List of active speakers in decreasing order of score
///
- (void)activeSpeakerDidDetectWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end

enum VolumeLevel : NSInteger;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19ActiveSpeakerPolicy_")
@protocol ActiveSpeakerPolicy
/// Return the score of the speaker. If the score is 0, this speaker is not active.
/// \param attendeeInfo Attendee to calculate the score for
///
/// \param volume Volume level of the speaker
///
///
/// returns:
/// The score of the speaker. The higher score, the more active the speaker.
- (double)calculateScoreWithAttendeeInfo:(AttendeeInfo * _Nonnull)attendeeInfo volume:(enum VolumeLevel)volume SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the audio video controller is allowed to increase video send bandwidth
/// for the currently active speaker if they have an active video tile. Set this to true, if
/// your application makes the active speaker video tile larger than the other tiles.
///
/// returns:
/// Whether to prioritize video bandwidth for active speakers
- (BOOL)prioritizeVideoSendBandwidthForActiveSpeaker SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK8Attendee")
@interface Attendee : NSObject
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId externalUserId:(NSString * _Nonnull)externalUserId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK12AttendeeInfo")
@interface AttendeeInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
@property (nonatomic, readonly, copy) NSString * _Nonnull externalUserId;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>AttendeeStatus</code> describes the status of attendee
typedef SWIFT_ENUM(NSInteger, AttendeeStatus, open) {
/// The attendee joined
  AttendeeStatusJoined = 1,
/// The attendee left
  AttendeeStatusLeft = 2,
/// The attendee dropped due to network issues
  AttendeeStatusDropped = 3,
};


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21AudioClientController_")
@protocol AudioClientController
- (BOOL)setMuteWithMute:(BOOL)mute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl meetingId:(NSString * _Nonnull)meetingId attendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken error:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@end

@protocol AudioVideoObserver;
@protocol RealtimeObserver;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19AudioClientObserver_")
@protocol AudioClientObserver
- (void)notifyAudioClientObserverWithObserverFunction:(void (^ _Nonnull)(id <AudioVideoObserver> _Nonnull))observerFunction;
- (void)subscribeToAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
- (void)unsubscribeFromAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeFromRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end

@class MeetingSessionConfiguration;
@protocol Logger;
@protocol MetricsObserver;

/// <code>AudioVideoControllerFacade</code> manages the signaling and peer connections.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK26AudioVideoControllerFacade_")
@protocol AudioVideoControllerFacade
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
/// Start AudioVideo Controller
///
/// throws:
/// <code>PermissionError.audioPermissionError</code> if <code>RecordPermission</code> is not given
- (BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop AudioVideo Controller. This will exit the meeting
- (void)stop;
/// Enable self video to start streaming
///
/// throws:
/// <code>PermissionError.videoPermissionError</code> if video permission of <code>AVCaptureDevice</code> is not granted
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disable self video streaming
- (void)stopLocalVideo;
/// Enable remote video to start receiving streams
- (void)startRemoteVideo;
/// Disable remote video to stop receiving streams
- (void)stopRemoteVideo;
/// Subscribe to audio, video, and connection events with an <code>AudioVideoObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Unsubscribes from audio, video, and connection events by removing specified <code>AudioVideoObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Subscribe to metrics events with an <code>MetricsObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
/// Unsubscribes from metrics events by removing specified <code>MetricsObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

@protocol VideoRenderView;
@protocol VideoTileObserver;

/// <code>VideoTileControllerFacade</code> allows one to control <code>VideoTile</code>. The caller is responsible for laying
/// out video render views as desired and binding tile ids received from the observer
/// in the <code>videoTileDidAdd</code> and <code>videoTileDidRemove</code> callbacks.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK25VideoTileControllerFacade_")
@protocol VideoTileControllerFacade
/// Binds the video rendering view to Video Tile. The view will start displaying the video frame
/// after the completion of this API
/// \param videoView View to render the video. Application needs to create it and pass to SDK.
///
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidAdd</code>
///
- (void)bindVideoViewWithVideoView:(id <VideoRenderView> _Nonnull)videoView tileId:(NSInteger)tileId;
/// Unbinds the video rendering view from Video Tile. The view will stop displaying the video frame
/// after the completion of this API
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidRemove</code>
///
- (void)unbindVideoViewWithTileId:(NSInteger)tileId;
/// Subscribe to Video Tile events with an <code>VideoTileObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Unsubscribes from Video Tile events by removing specified <code>VideoTileObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Pauses remote video tile, if it exists.
/// \param tileId The tile id to pause
///
- (void)pauseRemoteVideoTileWithTileId:(NSInteger)tileId;
/// Resume remote video tile, if it exists.
/// \param tileId The tile id to resume
///
- (void)resumeRemoteVideoTileWithTileId:(NSInteger)tileId;
@end

@class MediaDevice;
@protocol DeviceChangeObserver;

/// <code>DeviceController</code> keeps track of the devices being used for audio device
/// (e.g. built-in speaker), video input (e.g. camera)).
/// The list functions return <code>MediaDevice</code> objects.
/// Changes in device availability are broadcast to any registered
/// <code>DeviceChangeObserver</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16DeviceController_")
@protocol DeviceController
/// List available audio devices
///
/// returns:
/// list of Media Devices
- (NSArray<MediaDevice *> * _Nonnull)listAudioDevices SWIFT_WARN_UNUSED_RESULT;
/// Choose audio devices
/// \param mediaDevice the device used as audio route
///
- (void)chooseAudioDeviceWithMediaDevice:(MediaDevice * _Nonnull)mediaDevice;
/// Add device change observer
/// \param observer the object that will receive notification
///
- (void)addDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Remove device change observer
/// \param observer the object that will be removed
///
- (void)removeDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Switch between front/back camera
- (void)switchCamera;
/// Get currently used video device
///
/// returns:
/// a media device or nil if no device is present
- (MediaDevice * _Nullable)getActiveCamera SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>RealtimeControllerFacade</code> controls aspects meetings concerning realtime UX
/// that for performance, privacy, or other reasons should be implemented using
/// the most direct path. Callbacks generated by this interface should be
/// consumed synchronously and without business logic dependent on the UI state
/// where possible.
/// Events will be passed through <code>RealtimeObserver</code>, which in turn provides consumers the
/// volume/mute/signal/attendee callbacks that can be used to render in the UI.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK24RealtimeControllerFacade_")
@protocol RealtimeControllerFacade
/// Mutes the audio input.
///
/// returns:
/// Whether mute was successful
- (BOOL)realtimeLocalMute SWIFT_WARN_UNUSED_RESULT;
/// Unmutes the audio input if currently allowed
///
/// returns:
/// Whether unmute was successful
- (BOOL)realtimeLocalUnmute SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to real time events with an observer
/// \param observer Observer that handles real time events
///
- (void)addRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
/// Unsubscribes from real time events by removing the specified observer
/// \param observer Observer that handles real time events
///
- (void)removeRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16AudioVideoFacade_")
@protocol AudioVideoFacade <ActiveSpeakerDetectorFacade, AudioVideoControllerFacade, DeviceController, RealtimeControllerFacade, VideoTileControllerFacade>
@end

@class MeetingSessionStatus;

/// <code>AudioVideoObserver</code> handles audio/video session events.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK18AudioVideoObserver_")
@protocol AudioVideoObserver
/// Called when the audio session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartConnectingWithReconnecting:(BOOL)reconnecting;
/// Called when the audio session has started.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartWithReconnecting:(BOOL)reconnecting;
/// Called when audio session got dropped due to poor network conditions.
/// There will be an automatic attempt of reconnecting it.
/// If the reconnection is successful, <code>onAudioSessionStarted</code> will be called with value of reconnecting as true
/// Note: this callback will be called on main thread.
- (void)audioSessionDidDrop;
/// Called when the audio session has stopped with the reason
/// provided in the status. This callback implies that audio client has stopped permanently for this session and there will be
/// no attempt of reconnecting it.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)audioSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the audio reconnection is canceled.
/// Note: this callback will be called on main thread.
- (void)audioSessionDidCancelReconnect;
/// Called when the connection health is recovered.
/// Note: this callback will be called on main thread.
- (void)connectionDidRecover;
/// Called when connection is becoming poor.
/// Note: this callback will be called on main thread.
- (void)connectionDidBecomePoor;
/// Called when the video session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
- (void)videoSessionDidStartConnecting;
/// Called when the video session has started.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The status of meeting session
///
- (void)videoSessionDidStartWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the video session has stopped from a started state with the reason
/// provided in the status.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)videoSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
@end


/// ClientMetricsCollector takes the raw metrics from the native client,
/// consolidates them into a normalize map of ObservableMetric to value,
/// and eventually calls the OnReceiveMetric callback.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK22ClientMetricsCollector_")
@protocol ClientMetricsCollector
- (void)processAudioClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)processVideoClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)subscribeToMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
- (void)unsubscribeFromMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

enum LogLevel : NSInteger;

/// <code>Logger</code> defines how to write logs for different logging level.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK6Logger_")
@protocol Logger
/// Emits any message if the log level is equal to or lower than default level.
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
/// Calls <code>debugFunction</code> only if the log level is debug and emits the
/// resulting string. Use the debug level to dump large or verbose messages
/// that could slow down performance.
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
/// Emits an info message if the log level is equal to or lower than info level.
- (void)infoWithMsg:(NSString * _Nonnull)msg;
/// Emits a fault message if the log level is equal to or lower than fault level.
- (void)faultWithMsg:(NSString * _Nonnull)msg;
/// Emits an error message if the log level is equal to or lower than error level.
- (void)errorWithMsg:(NSString * _Nonnull)msg;
/// Sets the log level.
- (void)setLogLevelWithLevel:(enum LogLevel)level;
/// Gets the current log level.
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
@end


/// ConsoleLogger writes logs with console.
/// \code
/// // working with the ConsoleLogger
/// let logger = new ConsoleLogger("demo"); //default level is LogLevel.DEFAULT prints everything
/// logger.info("info");
/// logger.debug("debug");
/// logger.fault("fault");
/// logger.error("error");
///
/// // setting logging levels
/// let logger = new ConsoleLogger("demo", .INFO);
/// logger.debug("debug"); // does not print
/// logger.setLogLevel(LogLevel.DEBUG)
/// logger.debug("debug"); // print
///
/// \endcode
SWIFT_CLASS("_TtC14AmazonChimeSDK13ConsoleLogger")
@interface ConsoleLogger : NSObject <Logger>
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name level:(enum LogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
- (void)infoWithMsg:(NSString * _Nonnull)msg;
- (void)faultWithMsg:(NSString * _Nonnull)msg;
- (void)errorWithMsg:(NSString * _Nonnull)msg;
- (void)setLogLevelWithLevel:(enum LogLevel)level;
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK22CreateAttendeeResponse")
@interface CreateAttendeeResponse : NSObject
- (nonnull instancetype)initWithAttendee:(Attendee * _Nonnull)attendee OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Meeting;

SWIFT_CLASS("_TtC14AmazonChimeSDK21CreateMeetingResponse")
@interface CreateMeetingResponse : NSObject
- (nonnull instancetype)initWithMeeting:(Meeting * _Nonnull)meeting OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK14MeetingSession_")
@protocol MeetingSession
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK21DefaultMeetingSession")
@interface DefaultMeetingSession : NSObject <MeetingSession>
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
- (nonnull instancetype)initWithConfiguration:(MeetingSessionConfiguration * _Nonnull)configuration logger:(id <Logger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>VideoRenderView</code> renders frame that comes from <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15VideoRenderView_")
@protocol VideoRenderView
/// Render given frame to UI
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
@end

@class NSCoder;
@class UIImage;

SWIFT_CLASS("_TtC14AmazonChimeSDK22DefaultVideoRenderView")
@interface DefaultVideoRenderView : UIImageView <VideoRenderView>
@property (nonatomic) BOOL mirror;
@property (nonatomic) UIViewContentMode contentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)renderFrameWithFrame:(id _Nullable)frame;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


/// <code>DeviceChangeObserver</code> listens to the change of Audio Device.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK20DeviceChangeObserver_")
@protocol DeviceChangeObserver
/// Called when listAudioDevices() output changed
/// In another word, when a new media device become available
/// or old media device become unavailable
/// Note: this callback will be called on main thread.
/// \param freshAudioDeviceList updated list of available devices
///
- (void)audioDeviceDidChangeWithFreshAudioDeviceList:(NSArray<MediaDevice *> * _Nonnull)freshAudioDeviceList;
@end


typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDEFAULT = 0,
  LogLevelDEBUG = 1,
  LogLevelINFO = 2,
  LogLevelFAULT = 3,
  LogLevelERROR = 4,
  LogLevelOFF = 5,
};


enum MediaDeviceType : NSInteger;
@class AVAudioSessionPortDescription;
@class VideoDevice;

/// <code>MediaDevice</code> represents an IOS audio/video device.
SWIFT_CLASS("_TtC14AmazonChimeSDK11MediaDevice")
@interface MediaDevice : NSObject
/// Label of MediaDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Type of MediaDevice (ex: Bluetooth Audio, Front Camera)
@property (nonatomic, readonly) enum MediaDeviceType type;
/// Audio Information based on iOS native <code>AVAudioSessionPortDescription</code>
/// It will be null when it represent a video device.
@property (nonatomic, readonly, strong) AVAudioSessionPortDescription * _Nullable port;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label port:(AVAudioSessionPortDescription * _Nullable)port videoDevice:(VideoDevice * _Nullable)videoDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaDeviceType, open) {
  MediaDeviceTypeAudioBluetooth = 0,
  MediaDeviceTypeAudioWiredHeadset = 1,
  MediaDeviceTypeAudioBuiltInSpeaker = 2,
  MediaDeviceTypeAudioHandset = 3,
  MediaDeviceTypeVideoFrontCamera = 4,
  MediaDeviceTypeVideoBackCamera = 5,
  MediaDeviceTypeOther = 6,
};

typedef SWIFT_ENUM(NSInteger, MediaError, open) {
  MediaErrorIllegalState = 0,
};
static NSString * _Nonnull const MediaErrorDomain = @"AmazonChimeSDK.MediaError";


SWIFT_CLASS("_TtC14AmazonChimeSDK14MediaPlacement")
@interface MediaPlacement : NSObject
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl signalingUrl:(NSString * _Nonnull)signalingUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK7Meeting")
@interface Meeting : NSObject
- (nonnull instancetype)initWithExternalMeetingId:(NSString * _Nonnull)externalMeetingId mediaPlacement:(MediaPlacement * _Nonnull)mediaPlacement mediaRegion:(NSString * _Nonnull)mediaRegion meetingId:(NSString * _Nonnull)meetingId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MeetingSessionCredentials;
@class MeetingSessionURLs;

/// <code>MeetingSessionConfiguration</code> contains the information necessary to start a session.
/// Constructs a MeetingSessionConfiguration with a chime:<code>CreateMeetingResponse</code> and
/// chime:<code>CreateAttendeeResponse</code> response and optional custom <code>URLRewriter</code> that will
/// rewrite urls given to new urls.
SWIFT_CLASS("_TtC14AmazonChimeSDK27MeetingSessionConfiguration")
@interface MeetingSessionConfiguration : NSObject
/// The id of the meeting the session is joining.
@property (nonatomic, readonly, copy) NSString * _Nonnull meetingId;
/// The credentials used to authenticate the session.
@property (nonatomic, readonly, strong) MeetingSessionCredentials * _Nonnull credentials;
/// The URLs the session uses to reach the meeting service.
@property (nonatomic, readonly, strong) MeetingSessionURLs * _Nonnull urls;
@property (nonatomic, readonly, copy) NSString * _Nonnull (^ _Nonnull urlRewriter)(NSString * _Nonnull);
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse;
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse urlRewriter:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MeetingSessionCredentials</code> includes the credentials used to authenticate.
/// the attendee on the meeting
SWIFT_CLASS("_TtC14AmazonChimeSDK25MeetingSessionCredentials")
@interface MeetingSessionCredentials : NSObject
/// The attendee id for these credentials.
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
/// The token that the session will be authenticated with
@property (nonatomic, readonly, copy) NSString * _Nonnull joinToken;
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MeetingSessionStatusCode : uint32_t;

/// <code>MeetingSessionStatus</code> indicates a status received regarding the session.
SWIFT_CLASS("_TtC14AmazonChimeSDK20MeetingSessionStatus")
@interface MeetingSessionStatus : NSObject
@property (nonatomic, readonly) enum MeetingSessionStatusCode statusCode;
- (nonnull instancetype)initWithStatusCode:(enum MeetingSessionStatusCode)statusCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, MeetingSessionStatusCode, open) {
/// Everything is OK so far.
  MeetingSessionStatusCodeOk = 0,
/// The audio leg failed.
  MeetingSessionStatusCodeAudioDisconnected = 9,
/// Due to connection health a reconnect has been triggered.
  MeetingSessionStatusCodeConnectionHealthReconnect = 10,
/// Network is not good enough for VoIP.
  MeetingSessionStatusCodeNetworkBecomePoor = 59,
/// Server hung up.
  MeetingSessionStatusCodeAudioServerHungup = 60,
/// The attendee joined from another device.
  MeetingSessionStatusCodeAudioJoinedFromAnotherDevice = 61,
/// There was an internal server error with the audio leg.
  MeetingSessionStatusCodeAudioInternalServerError = 62,
/// Authentication was rejected. The client is not allowed on this call.
  MeetingSessionStatusCodeAudioAuthenticationRejected = 63,
/// The client can not join because the call is at capacity.
  MeetingSessionStatusCodeAudioCallAtCapacity = 64,
/// Could not connect the audio leg due to the service being unavailable.
  MeetingSessionStatusCodeAudioServiceUnavailable = 65,
/// The attendee should explicitly switch itself from joined with audio to checked-in.
  MeetingSessionStatusCodeAudioDisconnectAudio = 69,
/// The call was ended.
  MeetingSessionStatusCodeAudioCallEnded = 75,
/// video service is unavailable.
  MeetingSessionStatusCodeVideoServiceUnavailable = 12,
/// If State cannot be parsed, then use this state.
  MeetingSessionStatusCodeUnknown = 78,
/// When maximum concurrent video channel reached
  MeetingSessionStatusCodeVideoAtCapacityViewOnly = 206,
};


/// <code>MeetingSessionURLs</code> contains the URLs that will be used to reach the meeting service.
SWIFT_CLASS("_TtC14AmazonChimeSDK18MeetingSessionURLs")
@interface MeetingSessionURLs : NSObject
/// The audio fallback URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioFallbackUrl;
/// The audio host URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioHostUrl;
/// The TURN control URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull turnControlUrl;
/// The signaling URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull signalingUrl;
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl urlRewriter:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MetricsObserver</code> handles events related to audio/video metrics.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15MetricsObserver_")
@protocol MetricsObserver
/// Called when metrics are collected and ready
/// \param metrics A dictionary of ObservableMetric case to value
///
- (void)metricsDidReceiveWithMetrics:(NSDictionary * _Nonnull)metrics;
@end

/// <code>ObservableMetric</code> types represents filtered metrics that are intended to propagate to the
/// top level observers. All metrics are measured over the past second.
/// Send video metrics are only reported when sending.
/// Receive video metrics are only reported when receiving.
typedef SWIFT_ENUM(NSInteger, ObservableMetric, open) {
/// Percentage of audio packets lost from server to client
  ObservableMetricAudioReceivePacketLossPercent = 0,
/// Percentage of audio packets lost from client to server
  ObservableMetricAudioSendPacketLossPercent = 1,
/// Estimated uplink bandwidth from perspective of video client
  ObservableMetricVideoAvailableSendBandwidth = 2,
/// Estimated downlink bandwidth from perspective of video client
  ObservableMetricVideoAvailableReceiveBandwidth = 3,
/// Sum of total bitrate across all send streams
  ObservableMetricVideoSendBitrate = 4,
/// Percentage of video packets lost from client to server across all send streams
  ObservableMetricVideoSendPacketLossPercent = 5,
/// Average send FPS across all send streams
  ObservableMetricVideoSendFps = 6,
/// Round trip time of packets sent from client to server
  ObservableMetricVideoSendRttMs = 7,
/// Sum of total bitrate across all receive streams
  ObservableMetricVideoReceiveBitrate = 8,
/// Percentage of video packets lost from server to client across all receive streams
  ObservableMetricVideoReceivePacketLossPercent = 9,
};

typedef SWIFT_ENUM(NSInteger, PermissionError, open) {
  PermissionErrorAudioPermissionError = 0,
  PermissionErrorVideoPermissionError = 1,
};
static NSString * _Nonnull const PermissionErrorDomain = @"AmazonChimeSDK.PermissionError";


@class VolumeUpdate;
@class SignalUpdate;

/// <code>RealtimeObserver</code> handles event that happens in realtime,
/// such as delta in attendees join or leave, volume/signal status.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16RealtimeObserver_")
@protocol RealtimeObserver
/// Handles volume changes for attendees
/// Note: this callback will be called on main thread.
/// \param volumeUpdates An array of VolumeUpdates
///
- (void)volumeDidChangeWithVolumeUpdates:(NSArray<VolumeUpdate *> * _Nonnull)volumeUpdates;
/// Handles signal strength changes for attendees
/// Note: this callback will be called on main thread.
/// \param signalUpdates An array of SignalUpdates
///
- (void)signalStrengthDidChangeWithSignalUpdates:(NSArray<SignalUpdate *> * _Nonnull)signalUpdates;
/// List attendees that are newly added to the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo added
///
- (void)attendeesDidJoinWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that left the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who left
///
- (void)attendeesDidLeaveWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that got dropped from the meeting due to network
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who are dropped
///
- (void)attendeesDidDropWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that are newly muted in the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly muted
///
- (void)attendeesDidMuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that newly unmuted from the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly unmuted
///
- (void)attendeesDidUnmuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end


/// <code>Scheduler</code> calls a callback on the schedule determined by the implementation.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9Scheduler_")
@protocol Scheduler
/// Schedules the callback according to the implementation.
- (void)start;
/// Unschedules the callback and prevents it from being called anymore.
- (void)stop;
@end

/// <code>SignalStrength</code> describes the signal strength of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, SignalStrength, open) {
/// The attendee has no signal
  SignalStrengthNone = 0,
/// The attendee has low signal
  SignalStrengthLow = 1,
/// The attendee has high signal
  SignalStrengthHigh = 2,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12SignalUpdate")
@interface SignalUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum SignalStrength signalStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>URLRewriterUtils</code> is class that defines default Url rewrite behavior
SWIFT_CLASS("_TtC14AmazonChimeSDK16URLRewriterUtils")
@interface URLRewriterUtils : NSObject
/// The default implementation returns the original URL unchanged.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull (^ _Nonnull defaultUrlRewriter)(NSString * _Nonnull);)
+ (NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))defaultUrlRewriter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK10Versioning")
@interface Versioning : NSObject
/// Returns the current version of Amazon Chime SDK in the format of string.
/// If there is an error with the version, empty string will be returned.
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol VideoTileController;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21VideoClientController_")
@protocol VideoClientController
- (void)startWithTurnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl meetingId:(NSString * _Nonnull)meetingId joinToken:(NSString * _Nonnull)joinToken;
- (void)stopAndDestroy;
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopLocalVideo;
- (void)startRemoteVideo;
- (void)stopRemoteVideo;
- (void)switchCamera;
- (VideoDevice * _Nullable)getCurrentDevice SWIFT_WARN_UNUSED_RESULT;
- (void)subscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)unsubscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)pauseResumeRemoteVideo:(uint32_t)videoId pause:(BOOL)pause;
@end

/// <code>VideoPauseState</code> describes the pause status of a video tile.
typedef SWIFT_ENUM(NSInteger, VideoPauseState, open) {
/// The video tile is not paused
  VideoPauseStateUnpaused = 0,
/// The video tile has been paused by the user, and will only be unpaused if the user requests it to resume.
  VideoPauseStatePausedByUserRequest = 1,
/// The video tile has been paused to save on local downlink bandwidth.  When the connection improves,
/// it will be automatically unpaused by the client.  User requested pauses will shadow this pause,
/// but if the connection has not recovered on resume the tile will still be paused with this state.
  VideoPauseStatePausedForPoorConnection = 2,
};


@class VideoTileState;

/// <code>VideoTile</code> is a tile that binds video render view to diplay the frame into the view.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9VideoTile_")
@protocol VideoTile
/// State of VideoTile
@property (nonatomic, readonly, strong) VideoTileState * _Nonnull state;
/// View which will be used to render the Video Frame
@property (nonatomic, strong) id <VideoRenderView> _Nullable videoRenderView;
/// Binds the view to the tile. The view needs to be create by the application.
/// Once the binding is done, the view will start displaying the video frame automatically
/// \param videoRenderView the view created by application to render the video frame
///
- (void)bindWithVideoRenderView:(id <VideoRenderView> _Nullable)videoRenderView;
/// Renders the frame on <code>videoRenderView</code>. The call will be silently ignored if the view has not been bind
/// to the tile using <code>bind</code>
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
/// Unbinds the <code>videoRenderView</code> from tile.
- (void)unbind;
/// Update the pause state of the tile.
- (void)setPauseStateWithPauseState:(enum VideoPauseState)pauseState;
@end


/// <code>VideoTileController</code> handles rendering/creating of new <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19VideoTileController_")
@protocol VideoTileController <VideoTileControllerFacade>
/// Called whenever there is a new Video frame received for any of the attendee in the meeting
/// \param frame a frame of video
///
/// \param attendeeId a id of user who is transmitting current frame
///
/// \param pauseState current pause state of the video being received
///
/// \param videoId unique id that belongs to video being transmitted
///
- (void)onReceiveFrameWithFrame:(id _Nullable)frame attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState videoId:(NSInteger)videoId;
@end



/// <code>VideoTileObserver</code> handles events related to <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK17VideoTileObserver_")
@protocol VideoTileObserver
/// Called whenever a new attendee starts sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidAddWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever any attendee stops sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidRemoveWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes from .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidPauseWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes to .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidResumeWithTileState:(VideoTileState * _Nonnull)tileState;
@end


/// <code>VideoTileState</code> encapsulates the state of a <code>VideoTile</code>.
SWIFT_CLASS("_TtC14AmazonChimeSDK14VideoTileState")
@interface VideoTileState : NSObject
/// Unique Id associated with this tile
@property (nonatomic, readonly) NSInteger tileId;
/// Whether tile is local or remote tile
@property (nonatomic, readonly) BOOL isLocalTile;
/// Id of the user associated with this tile
@property (nonatomic, readonly, copy) NSString * _Nullable attendeeId;
/// Whether this is screen share
@property (nonatomic, readonly) BOOL isContent;
/// Current pause state of this tile
@property (nonatomic) enum VideoPauseState pauseState;
- (nonnull instancetype)initWithTileId:(NSInteger)tileId attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VolumeLevel</code> describes the volume level of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, VolumeLevel, open) {
/// The attendee is muted
  VolumeLevelMuted = -1,
/// The attendee is not speaking
  VolumeLevelNotSpeaking = 0,
/// The attendee is speaking at low volume
  VolumeLevelLow = 1,
/// The attendee is speaking at medium volume
  VolumeLevelMedium = 2,
/// The attendee is speaking at high volume
  VolumeLevelHigh = 3,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12VolumeUpdate")
@interface VolumeUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum VolumeLevel volumeLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmazonChimeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol ActiveSpeakerPolicy;
@protocol ActiveSpeakerObserver;

/// <code>ActiveSpeakerDetectorFacade</code> listens to the volume indicator updates from the <code>RealtimeControllerFacade</code>.
/// It consults the <code>ActiveSpeakerPolicy</code> to determine if the speaker is active or not.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK27ActiveSpeakerDetectorFacade_")
@protocol ActiveSpeakerDetectorFacade
/// Starts the active speaker detector on the callback for the given policy.
/// \param policy Handles Active Speaker implementation
///
/// \param observer Observer that handles Active Speaker Events
///
- (void)addActiveSpeakerObserverWithPolicy:(id <ActiveSpeakerPolicy> _Nonnull)policy observer:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Stops the active speaker detector callback from being called.
/// \param observer Observer that handles Active Speaker Events
///
- (void)removeActiveSpeakerObserverWithObserver:(id <ActiveSpeakerObserver> _Nonnull)observer;
/// Handles bandwidth
/// \param hasBandwidthPriority Tells the active speaker detector
/// whether or not to prioritize video bandwidth for active speakers
///
- (void)hasBandwidthPriorityCallbackWithHasBandwidthPriority:(BOOL)hasBandwidthPriority;
@end

@class AttendeeInfo;

/// <code>ActiveSpeakerObserver</code> handles event related to finding active speaker and corresponding scores
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21ActiveSpeakerObserver_")
@protocol ActiveSpeakerObserver
/// Uniquely identifies this observer
@property (nonatomic, readonly, copy) NSString * _Nonnull observerId;
@optional
/// Frequency of activeSpeakerScoreDidChange
@property (nonatomic, readonly) NSInteger scoresCallbackIntervalMs;
/// Observes the active speaker scores at frequency scoresCallbackIntervalMs
/// Note: this callback will be called on main thread.
/// \param scores Active speaker scores for each attendee
///
- (void)activeSpeakerScoreDidChangeWithScores:(NSDictionary<AttendeeInfo *, NSNumber *> * _Nonnull)scores;
@required
/// Observes changes in list of active speakers
/// Note: this callback will be called on main thread.
/// \param attendeeInfo List of active speakers in decreasing order of score
///
- (void)activeSpeakerDidDetectWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end

enum VolumeLevel : NSInteger;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19ActiveSpeakerPolicy_")
@protocol ActiveSpeakerPolicy
/// Return the score of the speaker. If the score is 0, this speaker is not active.
/// \param attendeeInfo Attendee to calculate the score for
///
/// \param volume Volume level of the speaker
///
///
/// returns:
/// The score of the speaker. The higher score, the more active the speaker.
- (double)calculateScoreWithAttendeeInfo:(AttendeeInfo * _Nonnull)attendeeInfo volume:(enum VolumeLevel)volume SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the audio video controller is allowed to increase video send bandwidth
/// for the currently active speaker if they have an active video tile. Set this to true, if
/// your application makes the active speaker video tile larger than the other tiles.
///
/// returns:
/// Whether to prioritize video bandwidth for active speakers
- (BOOL)prioritizeVideoSendBandwidthForActiveSpeaker SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK8Attendee")
@interface Attendee : NSObject
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId externalUserId:(NSString * _Nonnull)externalUserId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK12AttendeeInfo")
@interface AttendeeInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
@property (nonatomic, readonly, copy) NSString * _Nonnull externalUserId;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>AttendeeStatus</code> describes the status of attendee
typedef SWIFT_ENUM(NSInteger, AttendeeStatus, open) {
/// The attendee joined
  AttendeeStatusJoined = 1,
/// The attendee left
  AttendeeStatusLeft = 2,
/// The attendee dropped due to network issues
  AttendeeStatusDropped = 3,
};


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21AudioClientController_")
@protocol AudioClientController
- (BOOL)setMuteWithMute:(BOOL)mute SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl meetingId:(NSString * _Nonnull)meetingId attendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken error:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@end

@protocol AudioVideoObserver;
@protocol RealtimeObserver;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19AudioClientObserver_")
@protocol AudioClientObserver
- (void)notifyAudioClientObserverWithObserverFunction:(void (^ _Nonnull)(id <AudioVideoObserver> _Nonnull))observerFunction;
- (void)subscribeToAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
- (void)unsubscribeFromAudioClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeFromRealTimeEventsWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end

@class MeetingSessionConfiguration;
@protocol Logger;
@protocol MetricsObserver;

/// <code>AudioVideoControllerFacade</code> manages the signaling and peer connections.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK26AudioVideoControllerFacade_")
@protocol AudioVideoControllerFacade
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
/// Start AudioVideo Controller
///
/// throws:
/// <code>PermissionError.audioPermissionError</code> if <code>RecordPermission</code> is not given
- (BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop AudioVideo Controller. This will exit the meeting
- (void)stop;
/// Enable self video to start streaming
///
/// throws:
/// <code>PermissionError.videoPermissionError</code> if video permission of <code>AVCaptureDevice</code> is not granted
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disable self video streaming
- (void)stopLocalVideo;
/// Enable remote video to start receiving streams
- (void)startRemoteVideo;
/// Disable remote video to stop receiving streams
- (void)stopRemoteVideo;
/// Subscribe to audio, video, and connection events with an <code>AudioVideoObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Unsubscribes from audio, video, and connection events by removing specified <code>AudioVideoObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeAudioVideoObserverWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
/// Subscribe to metrics events with an <code>MetricsObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
/// Unsubscribes from metrics events by removing specified <code>MetricsObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeMetricsObserverWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

@protocol VideoRenderView;
@protocol VideoTileObserver;

/// <code>VideoTileControllerFacade</code> allows one to control <code>VideoTile</code>. The caller is responsible for laying
/// out video render views as desired and binding tile ids received from the observer
/// in the <code>videoTileDidAdd</code> and <code>videoTileDidRemove</code> callbacks.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK25VideoTileControllerFacade_")
@protocol VideoTileControllerFacade
/// Binds the video rendering view to Video Tile. The view will start displaying the video frame
/// after the completion of this API
/// \param videoView View to render the video. Application needs to create it and pass to SDK.
///
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidAdd</code>
///
- (void)bindVideoViewWithVideoView:(id <VideoRenderView> _Nonnull)videoView tileId:(NSInteger)tileId;
/// Unbinds the video rendering view from Video Tile. The view will stop displaying the video frame
/// after the completion of this API
/// \param tileId id of the tile which was passed to the application in <code>VideoTileObserver.videoTileDidRemove</code>
///
- (void)unbindVideoViewWithTileId:(NSInteger)tileId;
/// Subscribe to Video Tile events with an <code>VideoTileObserver</code>.
/// \param observer The observer to subscribe to events with
///
- (void)addVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Unsubscribes from Video Tile events by removing specified <code>VideoTileObserver</code>.
/// \param observer The observer to unsubscribe from events with
///
- (void)removeVideoTileObserverWithObserver:(id <VideoTileObserver> _Nonnull)observer;
/// Pauses remote video tile, if it exists.
/// \param tileId The tile id to pause
///
- (void)pauseRemoteVideoTileWithTileId:(NSInteger)tileId;
/// Resume remote video tile, if it exists.
/// \param tileId The tile id to resume
///
- (void)resumeRemoteVideoTileWithTileId:(NSInteger)tileId;
@end

@class MediaDevice;
@protocol DeviceChangeObserver;

/// <code>DeviceController</code> keeps track of the devices being used for audio device
/// (e.g. built-in speaker), video input (e.g. camera)).
/// The list functions return <code>MediaDevice</code> objects.
/// Changes in device availability are broadcast to any registered
/// <code>DeviceChangeObserver</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16DeviceController_")
@protocol DeviceController
/// List available audio devices
///
/// returns:
/// list of Media Devices
- (NSArray<MediaDevice *> * _Nonnull)listAudioDevices SWIFT_WARN_UNUSED_RESULT;
/// Choose audio devices
/// \param mediaDevice the device used as audio route
///
- (void)chooseAudioDeviceWithMediaDevice:(MediaDevice * _Nonnull)mediaDevice;
/// Add device change observer
/// \param observer the object that will receive notification
///
- (void)addDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Remove device change observer
/// \param observer the object that will be removed
///
- (void)removeDeviceChangeObserverWithObserver:(id <DeviceChangeObserver> _Nonnull)observer;
/// Switch between front/back camera
- (void)switchCamera;
/// Get currently used video device
///
/// returns:
/// a media device or nil if no device is present
- (MediaDevice * _Nullable)getActiveCamera SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>RealtimeControllerFacade</code> controls aspects meetings concerning realtime UX
/// that for performance, privacy, or other reasons should be implemented using
/// the most direct path. Callbacks generated by this interface should be
/// consumed synchronously and without business logic dependent on the UI state
/// where possible.
/// Events will be passed through <code>RealtimeObserver</code>, which in turn provides consumers the
/// volume/mute/signal/attendee callbacks that can be used to render in the UI.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK24RealtimeControllerFacade_")
@protocol RealtimeControllerFacade
/// Mutes the audio input.
///
/// returns:
/// Whether mute was successful
- (BOOL)realtimeLocalMute SWIFT_WARN_UNUSED_RESULT;
/// Unmutes the audio input if currently allowed
///
/// returns:
/// Whether unmute was successful
- (BOOL)realtimeLocalUnmute SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to real time events with an observer
/// \param observer Observer that handles real time events
///
- (void)addRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
/// Unsubscribes from real time events by removing the specified observer
/// \param observer Observer that handles real time events
///
- (void)removeRealtimeObserverWithObserver:(id <RealtimeObserver> _Nonnull)observer;
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16AudioVideoFacade_")
@protocol AudioVideoFacade <ActiveSpeakerDetectorFacade, AudioVideoControllerFacade, DeviceController, RealtimeControllerFacade, VideoTileControllerFacade>
@end

@class MeetingSessionStatus;

/// <code>AudioVideoObserver</code> handles audio/video session events.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK18AudioVideoObserver_")
@protocol AudioVideoObserver
/// Called when the audio session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartConnectingWithReconnecting:(BOOL)reconnecting;
/// Called when the audio session has started.
/// Note: this callback will be called on main thread.
/// \param reconnecting Whether the session is reconnecting or not.
///
- (void)audioSessionDidStartWithReconnecting:(BOOL)reconnecting;
/// Called when audio session got dropped due to poor network conditions.
/// There will be an automatic attempt of reconnecting it.
/// If the reconnection is successful, <code>onAudioSessionStarted</code> will be called with value of reconnecting as true
/// Note: this callback will be called on main thread.
- (void)audioSessionDidDrop;
/// Called when the audio session has stopped with the reason
/// provided in the status. This callback implies that audio client has stopped permanently for this session and there will be
/// no attempt of reconnecting it.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)audioSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the audio reconnection is canceled.
/// Note: this callback will be called on main thread.
- (void)audioSessionDidCancelReconnect;
/// Called when the connection health is recovered.
/// Note: this callback will be called on main thread.
- (void)connectionDidRecover;
/// Called when connection is becoming poor.
/// Note: this callback will be called on main thread.
- (void)connectionDidBecomePoor;
/// Called when the video session is connecting or reconnecting.
/// Note: this callback will be called on main thread.
- (void)videoSessionDidStartConnecting;
/// Called when the video session has started.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The status of meeting session
///
- (void)videoSessionDidStartWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
/// Called when the video session has stopped from a started state with the reason
/// provided in the status.
/// Note: this callback will be called on main thread.
/// \param sessionStatus The reason why the session has stopped.
///
- (void)videoSessionDidStopWithStatusWithSessionStatus:(MeetingSessionStatus * _Nonnull)sessionStatus;
@end


/// ClientMetricsCollector takes the raw metrics from the native client,
/// consolidates them into a normalize map of ObservableMetric to value,
/// and eventually calls the OnReceiveMetric callback.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK22ClientMetricsCollector_")
@protocol ClientMetricsCollector
- (void)processAudioClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)processVideoClientMetricsWithMetrics:(NSDictionary * _Nonnull)metrics;
- (void)subscribeToMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
- (void)unsubscribeFromMetricsWithObserver:(id <MetricsObserver> _Nonnull)observer;
@end

enum LogLevel : NSInteger;

/// <code>Logger</code> defines how to write logs for different logging level.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK6Logger_")
@protocol Logger
/// Emits any message if the log level is equal to or lower than default level.
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
/// Calls <code>debugFunction</code> only if the log level is debug and emits the
/// resulting string. Use the debug level to dump large or verbose messages
/// that could slow down performance.
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
/// Emits an info message if the log level is equal to or lower than info level.
- (void)infoWithMsg:(NSString * _Nonnull)msg;
/// Emits a fault message if the log level is equal to or lower than fault level.
- (void)faultWithMsg:(NSString * _Nonnull)msg;
/// Emits an error message if the log level is equal to or lower than error level.
- (void)errorWithMsg:(NSString * _Nonnull)msg;
/// Sets the log level.
- (void)setLogLevelWithLevel:(enum LogLevel)level;
/// Gets the current log level.
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
@end


/// ConsoleLogger writes logs with console.
/// \code
/// // working with the ConsoleLogger
/// let logger = new ConsoleLogger("demo"); //default level is LogLevel.DEFAULT prints everything
/// logger.info("info");
/// logger.debug("debug");
/// logger.fault("fault");
/// logger.error("error");
///
/// // setting logging levels
/// let logger = new ConsoleLogger("demo", .INFO);
/// logger.debug("debug"); // does not print
/// logger.setLogLevel(LogLevel.DEBUG)
/// logger.debug("debug"); // print
///
/// \endcode
SWIFT_CLASS("_TtC14AmazonChimeSDK13ConsoleLogger")
@interface ConsoleLogger : NSObject <Logger>
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name level:(enum LogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (void)defaultWithMsg:(NSString * _Nonnull)msg;
- (void)debugWithDebugFunction:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(void))debugFunction;
- (void)infoWithMsg:(NSString * _Nonnull)msg;
- (void)faultWithMsg:(NSString * _Nonnull)msg;
- (void)errorWithMsg:(NSString * _Nonnull)msg;
- (void)setLogLevelWithLevel:(enum LogLevel)level;
- (enum LogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK22CreateAttendeeResponse")
@interface CreateAttendeeResponse : NSObject
- (nonnull instancetype)initWithAttendee:(Attendee * _Nonnull)attendee OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Meeting;

SWIFT_CLASS("_TtC14AmazonChimeSDK21CreateMeetingResponse")
@interface CreateMeetingResponse : NSObject
- (nonnull instancetype)initWithMeeting:(Meeting * _Nonnull)meeting OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14AmazonChimeSDK14MeetingSession_")
@protocol MeetingSession
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK21DefaultMeetingSession")
@interface DefaultMeetingSession : NSObject <MeetingSession>
@property (nonatomic, readonly, strong) MeetingSessionConfiguration * _Nonnull configuration;
@property (nonatomic, readonly, strong) id <Logger> _Nonnull logger;
@property (nonatomic, readonly, strong) id <AudioVideoFacade> _Nonnull audioVideo;
- (nonnull instancetype)initWithConfiguration:(MeetingSessionConfiguration * _Nonnull)configuration logger:(id <Logger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>VideoRenderView</code> renders frame that comes from <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15VideoRenderView_")
@protocol VideoRenderView
/// Render given frame to UI
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
@end

@class NSCoder;
@class UIImage;

SWIFT_CLASS("_TtC14AmazonChimeSDK22DefaultVideoRenderView")
@interface DefaultVideoRenderView : UIImageView <VideoRenderView>
@property (nonatomic) BOOL mirror;
@property (nonatomic) UIViewContentMode contentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)renderFrameWithFrame:(id _Nullable)frame;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


/// <code>DeviceChangeObserver</code> listens to the change of Audio Device.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK20DeviceChangeObserver_")
@protocol DeviceChangeObserver
/// Called when listAudioDevices() output changed
/// In another word, when a new media device become available
/// or old media device become unavailable
/// Note: this callback will be called on main thread.
/// \param freshAudioDeviceList updated list of available devices
///
- (void)audioDeviceDidChangeWithFreshAudioDeviceList:(NSArray<MediaDevice *> * _Nonnull)freshAudioDeviceList;
@end


typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelDEFAULT = 0,
  LogLevelDEBUG = 1,
  LogLevelINFO = 2,
  LogLevelFAULT = 3,
  LogLevelERROR = 4,
  LogLevelOFF = 5,
};


enum MediaDeviceType : NSInteger;
@class AVAudioSessionPortDescription;
@class VideoDevice;

/// <code>MediaDevice</code> represents an IOS audio/video device.
SWIFT_CLASS("_TtC14AmazonChimeSDK11MediaDevice")
@interface MediaDevice : NSObject
/// Label of MediaDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Type of MediaDevice (ex: Bluetooth Audio, Front Camera)
@property (nonatomic, readonly) enum MediaDeviceType type;
/// Audio Information based on iOS native <code>AVAudioSessionPortDescription</code>
/// It will be null when it represent a video device.
@property (nonatomic, readonly, strong) AVAudioSessionPortDescription * _Nullable port;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label port:(AVAudioSessionPortDescription * _Nullable)port videoDevice:(VideoDevice * _Nullable)videoDevice OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaDeviceType, open) {
  MediaDeviceTypeAudioBluetooth = 0,
  MediaDeviceTypeAudioWiredHeadset = 1,
  MediaDeviceTypeAudioBuiltInSpeaker = 2,
  MediaDeviceTypeAudioHandset = 3,
  MediaDeviceTypeVideoFrontCamera = 4,
  MediaDeviceTypeVideoBackCamera = 5,
  MediaDeviceTypeOther = 6,
};

typedef SWIFT_ENUM(NSInteger, MediaError, open) {
  MediaErrorIllegalState = 0,
};
static NSString * _Nonnull const MediaErrorDomain = @"AmazonChimeSDK.MediaError";


SWIFT_CLASS("_TtC14AmazonChimeSDK14MediaPlacement")
@interface MediaPlacement : NSObject
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl signalingUrl:(NSString * _Nonnull)signalingUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK7Meeting")
@interface Meeting : NSObject
- (nonnull instancetype)initWithExternalMeetingId:(NSString * _Nonnull)externalMeetingId mediaPlacement:(MediaPlacement * _Nonnull)mediaPlacement mediaRegion:(NSString * _Nonnull)mediaRegion meetingId:(NSString * _Nonnull)meetingId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MeetingSessionCredentials;
@class MeetingSessionURLs;

/// <code>MeetingSessionConfiguration</code> contains the information necessary to start a session.
/// Constructs a MeetingSessionConfiguration with a chime:<code>CreateMeetingResponse</code> and
/// chime:<code>CreateAttendeeResponse</code> response and optional custom <code>URLRewriter</code> that will
/// rewrite urls given to new urls.
SWIFT_CLASS("_TtC14AmazonChimeSDK27MeetingSessionConfiguration")
@interface MeetingSessionConfiguration : NSObject
/// The id of the meeting the session is joining.
@property (nonatomic, readonly, copy) NSString * _Nonnull meetingId;
/// The credentials used to authenticate the session.
@property (nonatomic, readonly, strong) MeetingSessionCredentials * _Nonnull credentials;
/// The URLs the session uses to reach the meeting service.
@property (nonatomic, readonly, strong) MeetingSessionURLs * _Nonnull urls;
@property (nonatomic, readonly, copy) NSString * _Nonnull (^ _Nonnull urlRewriter)(NSString * _Nonnull);
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse;
- (nonnull instancetype)initWithCreateMeetingResponse:(CreateMeetingResponse * _Nonnull)createMeetingResponse createAttendeeResponse:(CreateAttendeeResponse * _Nonnull)createAttendeeResponse urlRewriter:(NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MeetingSessionCredentials</code> includes the credentials used to authenticate.
/// the attendee on the meeting
SWIFT_CLASS("_TtC14AmazonChimeSDK25MeetingSessionCredentials")
@interface MeetingSessionCredentials : NSObject
/// The attendee id for these credentials.
@property (nonatomic, readonly, copy) NSString * _Nonnull attendeeId;
/// The token that the session will be authenticated with
@property (nonatomic, readonly, copy) NSString * _Nonnull joinToken;
- (nonnull instancetype)initWithAttendeeId:(NSString * _Nonnull)attendeeId joinToken:(NSString * _Nonnull)joinToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MeetingSessionStatusCode : uint32_t;

/// <code>MeetingSessionStatus</code> indicates a status received regarding the session.
SWIFT_CLASS("_TtC14AmazonChimeSDK20MeetingSessionStatus")
@interface MeetingSessionStatus : NSObject
@property (nonatomic, readonly) enum MeetingSessionStatusCode statusCode;
- (nonnull instancetype)initWithStatusCode:(enum MeetingSessionStatusCode)statusCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint32_t, MeetingSessionStatusCode, open) {
/// Everything is OK so far.
  MeetingSessionStatusCodeOk = 0,
/// The audio leg failed.
  MeetingSessionStatusCodeAudioDisconnected = 9,
/// Due to connection health a reconnect has been triggered.
  MeetingSessionStatusCodeConnectionHealthReconnect = 10,
/// Network is not good enough for VoIP.
  MeetingSessionStatusCodeNetworkBecomePoor = 59,
/// Server hung up.
  MeetingSessionStatusCodeAudioServerHungup = 60,
/// The attendee joined from another device.
  MeetingSessionStatusCodeAudioJoinedFromAnotherDevice = 61,
/// There was an internal server error with the audio leg.
  MeetingSessionStatusCodeAudioInternalServerError = 62,
/// Authentication was rejected. The client is not allowed on this call.
  MeetingSessionStatusCodeAudioAuthenticationRejected = 63,
/// The client can not join because the call is at capacity.
  MeetingSessionStatusCodeAudioCallAtCapacity = 64,
/// Could not connect the audio leg due to the service being unavailable.
  MeetingSessionStatusCodeAudioServiceUnavailable = 65,
/// The attendee should explicitly switch itself from joined with audio to checked-in.
  MeetingSessionStatusCodeAudioDisconnectAudio = 69,
/// The call was ended.
  MeetingSessionStatusCodeAudioCallEnded = 75,
/// video service is unavailable.
  MeetingSessionStatusCodeVideoServiceUnavailable = 12,
/// If State cannot be parsed, then use this state.
  MeetingSessionStatusCodeUnknown = 78,
/// When maximum concurrent video channel reached
  MeetingSessionStatusCodeVideoAtCapacityViewOnly = 206,
};


/// <code>MeetingSessionURLs</code> contains the URLs that will be used to reach the meeting service.
SWIFT_CLASS("_TtC14AmazonChimeSDK18MeetingSessionURLs")
@interface MeetingSessionURLs : NSObject
/// The audio fallback URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioFallbackUrl;
/// The audio host URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull audioHostUrl;
/// The TURN control URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull turnControlUrl;
/// The signaling URL of the session
@property (nonatomic, readonly, copy) NSString * _Nonnull signalingUrl;
- (nonnull instancetype)initWithAudioFallbackUrl:(NSString * _Nonnull)audioFallbackUrl audioHostUrl:(NSString * _Nonnull)audioHostUrl turnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl urlRewriter:(SWIFT_NOESCAPE NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))urlRewriter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MetricsObserver</code> handles events related to audio/video metrics.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK15MetricsObserver_")
@protocol MetricsObserver
/// Called when metrics are collected and ready
/// \param metrics A dictionary of ObservableMetric case to value
///
- (void)metricsDidReceiveWithMetrics:(NSDictionary * _Nonnull)metrics;
@end

/// <code>ObservableMetric</code> types represents filtered metrics that are intended to propagate to the
/// top level observers. All metrics are measured over the past second.
/// Send video metrics are only reported when sending.
/// Receive video metrics are only reported when receiving.
typedef SWIFT_ENUM(NSInteger, ObservableMetric, open) {
/// Percentage of audio packets lost from server to client
  ObservableMetricAudioReceivePacketLossPercent = 0,
/// Percentage of audio packets lost from client to server
  ObservableMetricAudioSendPacketLossPercent = 1,
/// Estimated uplink bandwidth from perspective of video client
  ObservableMetricVideoAvailableSendBandwidth = 2,
/// Estimated downlink bandwidth from perspective of video client
  ObservableMetricVideoAvailableReceiveBandwidth = 3,
/// Sum of total bitrate across all send streams
  ObservableMetricVideoSendBitrate = 4,
/// Percentage of video packets lost from client to server across all send streams
  ObservableMetricVideoSendPacketLossPercent = 5,
/// Average send FPS across all send streams
  ObservableMetricVideoSendFps = 6,
/// Round trip time of packets sent from client to server
  ObservableMetricVideoSendRttMs = 7,
/// Sum of total bitrate across all receive streams
  ObservableMetricVideoReceiveBitrate = 8,
/// Percentage of video packets lost from server to client across all receive streams
  ObservableMetricVideoReceivePacketLossPercent = 9,
};

typedef SWIFT_ENUM(NSInteger, PermissionError, open) {
  PermissionErrorAudioPermissionError = 0,
  PermissionErrorVideoPermissionError = 1,
};
static NSString * _Nonnull const PermissionErrorDomain = @"AmazonChimeSDK.PermissionError";


@class VolumeUpdate;
@class SignalUpdate;

/// <code>RealtimeObserver</code> handles event that happens in realtime,
/// such as delta in attendees join or leave, volume/signal status.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK16RealtimeObserver_")
@protocol RealtimeObserver
/// Handles volume changes for attendees
/// Note: this callback will be called on main thread.
/// \param volumeUpdates An array of VolumeUpdates
///
- (void)volumeDidChangeWithVolumeUpdates:(NSArray<VolumeUpdate *> * _Nonnull)volumeUpdates;
/// Handles signal strength changes for attendees
/// Note: this callback will be called on main thread.
/// \param signalUpdates An array of SignalUpdates
///
- (void)signalStrengthDidChangeWithSignalUpdates:(NSArray<SignalUpdate *> * _Nonnull)signalUpdates;
/// List attendees that are newly added to the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo added
///
- (void)attendeesDidJoinWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that left the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who left
///
- (void)attendeesDidLeaveWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that got dropped from the meeting due to network
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo who are dropped
///
- (void)attendeesDidDropWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that are newly muted in the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly muted
///
- (void)attendeesDidMuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
/// List attendees that newly unmuted from the meeting
/// Note: this callback will be called on main thread.
/// \param attendeeInfo an array of AttendeeInfo newly unmuted
///
- (void)attendeesDidUnmuteWithAttendeeInfo:(NSArray<AttendeeInfo *> * _Nonnull)attendeeInfo;
@end


/// <code>Scheduler</code> calls a callback on the schedule determined by the implementation.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9Scheduler_")
@protocol Scheduler
/// Schedules the callback according to the implementation.
- (void)start;
/// Unschedules the callback and prevents it from being called anymore.
- (void)stop;
@end

/// <code>SignalStrength</code> describes the signal strength of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, SignalStrength, open) {
/// The attendee has no signal
  SignalStrengthNone = 0,
/// The attendee has low signal
  SignalStrengthLow = 1,
/// The attendee has high signal
  SignalStrengthHigh = 2,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12SignalUpdate")
@interface SignalUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum SignalStrength signalStrength;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>URLRewriterUtils</code> is class that defines default Url rewrite behavior
SWIFT_CLASS("_TtC14AmazonChimeSDK16URLRewriterUtils")
@interface URLRewriterUtils : NSObject
/// The default implementation returns the original URL unchanged.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull (^ _Nonnull defaultUrlRewriter)(NSString * _Nonnull);)
+ (NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull))defaultUrlRewriter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14AmazonChimeSDK10Versioning")
@interface Versioning : NSObject
/// Returns the current version of Amazon Chime SDK in the format of string.
/// If there is an error with the version, empty string will be returned.
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol VideoTileController;

SWIFT_PROTOCOL("_TtP14AmazonChimeSDK21VideoClientController_")
@protocol VideoClientController
- (void)startWithTurnControlUrl:(NSString * _Nonnull)turnControlUrl signalingUrl:(NSString * _Nonnull)signalingUrl meetingId:(NSString * _Nonnull)meetingId joinToken:(NSString * _Nonnull)joinToken;
- (void)stopAndDestroy;
- (BOOL)startLocalVideoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopLocalVideo;
- (void)startRemoteVideo;
- (void)stopRemoteVideo;
- (void)switchCamera;
- (VideoDevice * _Nullable)getCurrentDevice SWIFT_WARN_UNUSED_RESULT;
- (void)subscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)unsubscribeToVideoClientStateChangeWithObserver:(id <AudioVideoObserver> _Nonnull)observer;
- (void)subscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)unsubscribeToVideoTileControllerObserversWithObserver:(id <VideoTileController> _Nonnull)observer;
- (void)pauseResumeRemoteVideo:(uint32_t)videoId pause:(BOOL)pause;
@end

/// <code>VideoPauseState</code> describes the pause status of a video tile.
typedef SWIFT_ENUM(NSInteger, VideoPauseState, open) {
/// The video tile is not paused
  VideoPauseStateUnpaused = 0,
/// The video tile has been paused by the user, and will only be unpaused if the user requests it to resume.
  VideoPauseStatePausedByUserRequest = 1,
/// The video tile has been paused to save on local downlink bandwidth.  When the connection improves,
/// it will be automatically unpaused by the client.  User requested pauses will shadow this pause,
/// but if the connection has not recovered on resume the tile will still be paused with this state.
  VideoPauseStatePausedForPoorConnection = 2,
};


@class VideoTileState;

/// <code>VideoTile</code> is a tile that binds video render view to diplay the frame into the view.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK9VideoTile_")
@protocol VideoTile
/// State of VideoTile
@property (nonatomic, readonly, strong) VideoTileState * _Nonnull state;
/// View which will be used to render the Video Frame
@property (nonatomic, strong) id <VideoRenderView> _Nullable videoRenderView;
/// Binds the view to the tile. The view needs to be create by the application.
/// Once the binding is done, the view will start displaying the video frame automatically
/// \param videoRenderView the view created by application to render the video frame
///
- (void)bindWithVideoRenderView:(id <VideoRenderView> _Nullable)videoRenderView;
/// Renders the frame on <code>videoRenderView</code>. The call will be silently ignored if the view has not been bind
/// to the tile using <code>bind</code>
/// \param frame a frame of video
///
- (void)renderFrameWithFrame:(id _Nullable)frame;
/// Unbinds the <code>videoRenderView</code> from tile.
- (void)unbind;
/// Update the pause state of the tile.
- (void)setPauseStateWithPauseState:(enum VideoPauseState)pauseState;
@end


/// <code>VideoTileController</code> handles rendering/creating of new <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK19VideoTileController_")
@protocol VideoTileController <VideoTileControllerFacade>
/// Called whenever there is a new Video frame received for any of the attendee in the meeting
/// \param frame a frame of video
///
/// \param attendeeId a id of user who is transmitting current frame
///
/// \param pauseState current pause state of the video being received
///
/// \param videoId unique id that belongs to video being transmitted
///
- (void)onReceiveFrameWithFrame:(id _Nullable)frame attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState videoId:(NSInteger)videoId;
@end



/// <code>VideoTileObserver</code> handles events related to <code>VideoTile</code>.
SWIFT_PROTOCOL("_TtP14AmazonChimeSDK17VideoTileObserver_")
@protocol VideoTileObserver
/// Called whenever a new attendee starts sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidAddWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever any attendee stops sharing the video
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidRemoveWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes from .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidPauseWithTileState:(VideoTileState * _Nonnull)tileState;
/// Called whenever an attendee tile pauseState changes to .unpaused
/// Note: this callback will be called on main thread.
/// \param tileState video tile state associated with this attendee
///
- (void)videoTileDidResumeWithTileState:(VideoTileState * _Nonnull)tileState;
@end


/// <code>VideoTileState</code> encapsulates the state of a <code>VideoTile</code>.
SWIFT_CLASS("_TtC14AmazonChimeSDK14VideoTileState")
@interface VideoTileState : NSObject
/// Unique Id associated with this tile
@property (nonatomic, readonly) NSInteger tileId;
/// Whether tile is local or remote tile
@property (nonatomic, readonly) BOOL isLocalTile;
/// Id of the user associated with this tile
@property (nonatomic, readonly, copy) NSString * _Nullable attendeeId;
/// Whether this is screen share
@property (nonatomic, readonly) BOOL isContent;
/// Current pause state of this tile
@property (nonatomic) enum VideoPauseState pauseState;
- (nonnull instancetype)initWithTileId:(NSInteger)tileId attendeeId:(NSString * _Nullable)attendeeId pauseState:(enum VideoPauseState)pauseState OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VolumeLevel</code> describes the volume level of an attendee for audio.
typedef SWIFT_ENUM(NSInteger, VolumeLevel, open) {
/// The attendee is muted
  VolumeLevelMuted = -1,
/// The attendee is not speaking
  VolumeLevelNotSpeaking = 0,
/// The attendee is speaking at low volume
  VolumeLevelLow = 1,
/// The attendee is speaking at medium volume
  VolumeLevelMedium = 2,
/// The attendee is speaking at high volume
  VolumeLevelHigh = 3,
};


SWIFT_CLASS("_TtC14AmazonChimeSDK12VolumeUpdate")
@interface VolumeUpdate : NSObject
@property (nonatomic, readonly, strong) AttendeeInfo * _Nonnull attendeeInfo;
@property (nonatomic, readonly) enum VolumeLevel volumeLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
